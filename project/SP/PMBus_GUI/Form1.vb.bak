Imports System.IO
Imports System.Text
Imports System.BitConverter
Imports System.Threading
Public Class Form1

#Region " Variables"

#Region "Common"
    Dim ascii As Encoding = Encoding.ASCII
    Dim Hardware_Selection As Byte = 0
    Dim Hardware_Detected As Byte = 0
    Dim Err_Rec_Count As UInteger = 0
    Dim Poll_Dly_Count As Byte = 0
    Dim Null_Data As Byte
    Dim ReadCaliDataBackCnt As Byte = 0

    Dim Win_I2C_Error As Boolean = False
    Dim Pic_Kit_Error As Boolean = False

    Dim RTB1_Line_Num As UInteger = 0
    Dim Read_Buf(64) As Byte
    Dim Write_Buf(72) As Byte
    Dim Read_Buf_Str As String = ""
    Dim Write_Buf_Str As String = ""
    Dim I2C_Err_Flag As Boolean = False
    Dim Slave_Addr As Byte
    Dim Slave_Addr_Rd As Byte
    Dim Poll_Button_Latched As Boolean
    Dim CRC8_Byte As Byte = 0
    Dim PEC_Err_Flag As Boolean = False
    Dim Query As Boolean = False
    Dim Query_Delay As Byte

#End Region

#Region "FaultLogHistory"

    Dim Read_Fault_Sta As Byte = 0
    Dim Read_Fault_Pntr As Byte = 0
    Dim Read_All_Fault_Hist As Boolean = False


#End Region

#Region "Pmbus"
    Dim Log_File_Name As String
    Dim Data_Str(3000) As String
    Dim Data_Arr_Pntr As UInteger = 0
    Dim Capture_Data As Boolean = False
    Dim Capture_Data_Delay As UInteger = 0
    Dim Capture_Data_Pntr As UInteger = 0

    Dim PEC_Sta As Boolean = False           'PEC Enabled Status
    Dim Mux_Sta As Boolean = False
    Dim Vout_Resolu As Byte = 24             '24 - 3.90625mV, 25- 7.8125mV, 26 - 15.625mV, 28 - 62.5mV, 29- 125mV
    Dim Pmb_Hex_Data As String = ""
    Dim Pmb_Act_Data As String = ""
    Dim Neg_Str As String = ""
    Dim Neg_T_Sta As Boolean = False

    Private Structure PMBus_Rd
        Public Command As Byte
        Public Cmd_Name As String
        Public RW_Length As Byte
        Public Data As Boolean
        Public Vout As Boolean
        Public Resolu_Str As String
        Public Sub New(first As Byte, second As String, third As Byte, fourth As Boolean, fifth As Boolean, Sixth As String)
            Command = first
            Cmd_Name = second
            RW_Length = third
            Data = fourth
            Vout = fifth
            Resolu_Str = Sixth
        End Sub
    End Structure
    Dim PMBus_Data_Struct() As PMBus_Rd = {
     New PMBus_Rd(&H0, "PAGE", 1, False, False, ""), _
     New PMBus_Rd(&H78, "STATUS BYTE", 1, False, False, ""), _
     New PMBus_Rd(&H79, "STATUS WORD", 2, False, False, ""), _
     New PMBus_Rd(&H7A, "STATUS VOUT", 1, False, False, ""), _
     New PMBus_Rd(&H7B, "STATUS IOUT", 1, False, False, ""), _
     New PMBus_Rd(&H7C, "STATUS INPUT", 1, False, False, ""), _
     New PMBus_Rd(&H7D, "STATUS TEMP", 1, False, False, ""), _
     New PMBus_Rd(&H7E, "STATUS CML", 1, False, False, ""), _
     New PMBus_Rd(&H7F, "STATUS OTHER", 1, False, False, ""), _
     New PMBus_Rd(&H80, "STATUS MFR", 1, False, False, ""), _
     New PMBus_Rd(&H81, "STATUS_FANS_1_2", 1, False, False, ""), _
     New PMBus_Rd(&H86, "READ EIN", 6, False, False, ""), _
     New PMBus_Rd(&H87, "READ EOUT", 6, False, False, ""), _
     New PMBus_Rd(&H88, "READ VIN", 2, True, False, " Volts"), _
     New PMBus_Rd(&H89, "READ IIN", 2, True, False, " Amps"), _
     New PMBus_Rd(&H8A, "READ VCAP", 2, True, False, " Volts"), _
     New PMBus_Rd(&H8B, "READ VOUT", 2, True, True, " Volts"), _
     New PMBus_Rd(&H8C, "READ IOUT", 2, True, False, " Amps"), _
     New PMBus_Rd(&H8D, "T Ambient", 2, True, False, " 'C"), _
     New PMBus_Rd(&H8E, "T Hotspot Sec", 2, True, False, " 'C"), _
     New PMBus_Rd(&H8F, "T Hotspot Pri", 2, True, False, " 'C"), _
     New PMBus_Rd(&H90, "READ FAN SPEED_1", 2, True, False, " RPM"), _
     New PMBus_Rd(&H96, "READ POUT", 2, True, False, " Watts"), _
     New PMBus_Rd(&H97, "READ PIN", 2, True, False, " Watts"), _
     New PMBus_Rd(&HD1, " READ VSHARE", 2, True, False, " Volts"), _
     New PMBus_Rd(&H20, "VOUT_MODE", 1, False, False, ""), _
     New PMBus_Rd(&H1, "OPERATION", 1, False, False, ""), _
     New PMBus_Rd(&H98, "PMBus Revision", 1, False, False, "")
        }

    Dim PMBus_Cnst_Struct() As PMBus_Rd = {
    New PMBus_Rd(&H2, "ON_OFF_CONFIG", 1, False, False, ""), _
    New PMBus_Rd(&H19, "CAPABILITY", 1, False, False, ""), _
    New PMBus_Rd(&H20, "VOUT_MODE", 1, False, False, ""), _
    New PMBus_Rd(&H30, "COEFFICIENTS", 5, False, False, ""), _
    New PMBus_Rd(&H3A, "FAN_CONFIG_1_2", 1, False, False, ""), _
    New PMBus_Rd(&H40, "VOUT_OV_FAULT_LIMIT", 2, True, True, " Volts"), _
    New PMBus_Rd(&H46, "IOUT_OC_FAULT_LIMIT", 2, True, False, " Amps"), _
    New PMBus_Rd(&H48, "IOUT_OC_LV_FAULT_LIMIT", 2, True, False, " Amps"), _
    New PMBus_Rd(&H4A, "IOUT_OC_WARN_LIMIT", 2, True, False, " Amps"), _
    New PMBus_Rd(&H4F, "OT_FAULT_LIMIT", 2, True, False, " 'C"), _
    New PMBus_Rd(&H51, "OT_WARN_LIMIT", 2, True, False, " 'C"), _
    New PMBus_Rd(&H55, "VIN_OV_FAULT_LIMIT ", 2, True, False, " Volts"), _
    New PMBus_Rd(&H59, "VIN_UV_FAULT_LIMIT", 2, True, False, " Volts"), _
    New PMBus_Rd(&HF5, "Cisco_FW_REVISION", 6, False, False, ""), _
    New PMBus_Rd(&HF6, "BL_REVISION", 6, False, False, ""), _
    New PMBus_Rd(&HF7, "QCS_FW_REVISION", 6, False, False, "")
       }

    Private Structure Black_Box_Rd
        Public Command As Byte
        Public Cmd_Name As String
        Public RW_Length As Byte
        Public Data As Boolean
        Public Vout As Boolean
        Public Resolu_Str As String
        Public Sub New(first As Byte, second As String, third As Byte, fourth As Boolean, fifth As Boolean, Sixth As String)
            Command = first
            Cmd_Name = second
            RW_Length = third
            Data = fourth
            Vout = fifth
            Resolu_Str = Sixth
        End Sub
    End Structure
    Dim Black_Box_Struct() As Black_Box_Rd = {
     New Black_Box_Rd(&H0, "Failure_Page", 1, False, False, ""), _
     New Black_Box_Rd(&H79, "V1_Status_Word", 2, False, False, ""), _
     New Black_Box_Rd(&H7A, "V1_Status_Vout", 1, False, False, ""), _
     New Black_Box_Rd(&H7B, "V1_Status_Iout", 1, False, False, ""), _
     New Black_Box_Rd(&H7C, "Status_Input", 1, False, False, ""), _
     New Black_Box_Rd(&H7D, "Status_Temp", 1, False, False, ""), _
     New Black_Box_Rd(&H7E, "Status_CML", 1, False, False, ""), _
     New Black_Box_Rd(&H81, "Status_Fans_12", 1, False, False, ""), _
     New Black_Box_Rd(&H88, "Read_Vin", 2, True, False, " Volts"), _
     New Black_Box_Rd(&H89, "Read_Iin", 2, True, False, " Amps"), _
     New Black_Box_Rd(&H8B, "Read_Vout", 2, True, False, " Volts"), _
     New Black_Box_Rd(&H8C, "Read_Iout", 2, True, False, " Amps"), _
     New Black_Box_Rd(&H8D, "Read_Temp1", 2, True, False, " 'C"), _
     New Black_Box_Rd(&H8E, "Read_Temp2", 2, True, False, " 'C"), _
     New Black_Box_Rd(&H8F, "Read_Temp3", 2, True, False, " 'C"), _
     New Black_Box_Rd(&H90, "Read_FanSpeed1", 2, True, False, " RPM"), _
     New Black_Box_Rd(&HD5, "FW_Version", 6, True, False, ""), _
     New Black_Box_Rd(&HE5, "MFR_POS_TOTAL", 4, True, False, "Secs"), _
     New Black_Box_Rd(&HE6, "MFR_POS_LAST", 4, True, False, "Secs"), _
     New Black_Box_Rd(&HD2, "VSB_Status_Vout", 2, False, False, ""), _
     New Black_Box_Rd(&HD3, "VSB_Status_Iout", 2, False, False, ""), _
     New Black_Box_Rd(&HEE, "Read_Vsb", 2, True, False, " Volts"), _
     New Black_Box_Rd(&HEF, "Read_Isb", 2, True, False, " Amps")
       }
#End Region

#Region "Internal Data"
    Dim Int_Data(50) As Byte
    Dim Int_Data_Pntr As Byte = 0
    Dim Cal_Int_Flag = False
    Dim Cal_Sta As Byte = 0
    Dim Cal_Save_Sta As Byte = 0
    Dim Cal_Save_Delay As Byte = 0
    Dim Cal_Pass As Boolean = False
    Dim x1 As Double
    Dim x2 As Double
    Dim y1 As Double
    Dim y2 As Double
    Dim z1 As Double
    Dim z2 As Double
    Dim k As Double
    Dim b As Double = 0
    Dim Temp As Double
    Dim Cal_temp As Integer
    Dim Gain As Integer = 0
    Dim Offset As Integer = 0
    Dim offset_temp As Double = 0
    Dim Gain_Temp As Double = 0
    Dim Threshold As UInteger = 0
    Dim Threshold_Temp As Double = 0
    Dim Neg_Offset As Boolean = False
    Dim PMBus_Factor As Byte = 0
    Dim Pmbus_Rd_Data As UInteger = 0
    Dim RANGE As UInteger = 0

    Private Structure Intern_Data
        Public Addr As Byte
        Public Reg_Name As String
        Public Length As Byte
        Public Data As Boolean
        Public Resol As Single
        Public Resolu_Str As String
        Public Visible As Boolean
        Public Sub New(ByVal first As Byte, ByVal second As String, ByVal third As Byte, ByVal fourth As Boolean, ByVal fifth As Single, ByVal sixth As String, ByVal seventh As Boolean)
            Addr = first
            Reg_Name = second
            Length = third
            Data = fourth
            Resol = fifth
            Resolu_Str = sixth
            Visible = seventh
        End Sub
    End Structure
    Dim Internal_Data_Struct() As Intern_Data = {
        New Intern_Data(&HD5, "Pri. FW Rev.", 2, False, 0.0, "", True),
        New Intern_Data(&HD7, "Sec. FW Rev.", 2, False, 0.0, "", True),
        New Intern_Data(&HE0, "Primary Status 0", 2, False, 0.0, "", True),
        New Intern_Data(&HE1, "Primary Status 1", 2, False, 0.0, "", True),
        New Intern_Data(&HE2, "Secondary Flag 0", 2, False, 0.0, "", True),
        New Intern_Data(&HE3, "Secondary Flag 1", 2, False, 0.0, "", True),
        New Intern_Data(&HE4, "Secondary Flag 2", 2, False, 0.0, "", True),
        New Intern_Data(&HE5, "Secondary V1 Ext", 2, False, 0.0, "", True),
        New Intern_Data(&HF9, "Addr. Pointer Read", 2, False, 0.0, "", True),
        New Intern_Data(&HFA, "Debug Command", 2, False, 0.0, "", True),
        New Intern_Data(&HF5, "PMBus ADR IIN ADC", 2, False, 0.0, "", True),
        New Intern_Data(&HF6, "PMBus ADR VIN ADC", 2, False, 0.0, "", True),
        New Intern_Data(&HEB, "Time Odometer", 3, False, 0.0, "", True),
        New Intern_Data(&HF7, "PMBus ADR PIN ADC", 2, False, 0.0, "", True)
        }

#End Region
#Region "Calibration"
    Dim CaliMode As Byte
    Dim CaliModeLineNum As Byte
    Dim CaliLineIndex As Byte
    Dim CaliDebugRegister As Byte
    Dim CaliSendDataDoneFlag As Boolean
    Dim CaliADAmp As Double
    Dim CaliRealAmp As Double
    Dim CaliAmp As Double
    Dim CaliOfs As Double
    Dim CaliThr As Double
#End Region
#Region "Primary"
    Dim Pri_Rd_Flag As Boolean = False
    Dim Read_Pri_Flag As Boolean = False
    Dim Read_Pri_Addr As Byte = 0
    Dim Read_Pri_End_Addr As Byte = 0
    Dim Read_Pri_Sta As Boolean = 0
    Dim Read_Pri_Delay As UInteger = 0
    Dim Pri_Cal_Sta As Byte = 0
    Dim Pri_Save_Sta As Byte = 0
    Dim Pri_Save_Delay As Byte = 0
    Dim Pri_Data(126) As Byte
    Dim I_Resolution As Single = 0.0625   'Amps
    Dim P_Resolution As Single = 0.25       'Watts
    Dim Read_Cal_Data As Boolean = True
    Dim Act_Curr As UInteger
    Dim Act_Pwr As UInteger

    Dim Cal_Data_CRC As Byte = 0

    Private Structure Primary
        Public Addr As Byte
        Public Reg_Name As String
        Public Length As Byte
        Public Data As Boolean
        Public Resol As Single
        Public Resolu_Str As String
        Public Visible As Boolean
        Public Sub New(first As Byte, second As String, third As Byte, fourth As Boolean, fifth As Single, sixth As String, seventh As Boolean)
            Addr = first
            Reg_Name = second
            Length = third
            Data = fourth
            Resol = fifth
            Resolu_Str = sixth
            Visible = seventh
        End Sub
    End Structure
    Dim Primary_Data_Struct() As Primary = {
        New Primary(&H0, "VIN_ADC", 2, False, 0.0, "", True),
        New Primary(&H1, "IIN_ADC", 2, False, 0.0, "", True),
        New Primary(&H2, "PIN_ADC", 2, False, 0.0, "", True),
        New Primary(&H3, "BULK_ADC", 2, False, 0.0, "", True),
        New Primary(&H5, "PFC_ADC", 2, False, 0.0, "", True),
        New Primary(&H6, "STATUS0", 2, False, 0.0, "", True),
        New Primary(&H7, "STATUS1", 2, False, 0.0, "", True),
        New Primary(&H8, "DEBUG0", 2, False, 0.0, "", True),
        New Primary(&H9, "DEBUG1", 2, False, 0.0, "", True),
        New Primary(&HA, "OUTLET_ADC", 2, False, 0.0, "", True)
        }
#End Region

#Region "Secondary"
    Dim Sec_Data(96) As Byte
    Dim Update_Cal_Data As Boolean = False
    Private Structure Secondary
        Public Addr As Byte
        Public Reg_Name As String
        Public Length As Byte
        Public Data As Boolean
        Public Resol As Single
        Public Resolu_Str As String
        Public Visible As Boolean
        Public Sub New(first As Byte, second As String, third As Byte, fourth As Boolean, fifth As Single, sixth As String, seventh As Boolean)
            Addr = first
            Reg_Name = second
            Length = third
            Data = fourth
            Resol = fifth
            Resolu_Str = sixth
            Visible = seventh
        End Sub
    End Structure
    Dim Secondary_Data_Struct() As Secondary = {
        New Secondary(0, "SEC_V1_INT_ADC", 2, True, 0.0, "", True), _
        New Secondary(1, "SEC_V1_EXT_ADC", 2, True, 0.0, "", True), _
        New Secondary(2, "SEC_V1_I_ADC", 2, True, 0.0, "", True), _
        New Secondary(3, "SEC_I1_SHARE_ADC", 2, True, 0.0, "", True), _
        New Secondary(4, "SEC_I1_LOCAL_ADC", 2, True, 0.0, "", True), _
        New Secondary(5, "SEC_VSB_INT_ADC", 2, True, 0.0, "", True), _
        New Secondary(6, "SEC_VSB_EXT_ADC", 2, True, 0.0, "", True), _
        New Secondary(7, "SEC_VSB_CURR_ADC", 2, True, 0.0, "", True), _
        New Secondary(8, "SEC_NTC_AMB_ADC", 2, True, 0.0, "", True), _
        New Secondary(9, "SEC_NTC_SR1_ADC", 2, True, 0.0, "", True), _
        New Secondary(10, "SEC_NTC_SR2_ADC", 2, True, 0.0, "", True), _
        New Secondary(11, "SEC_NTC_AMB_TEMP", 2, True, 0.0, "", True), _
        New Secondary(12, "SEC_NTC_SR1_TEMP", 2, True, 0.0, "", True), _
        New Secondary(13, "SEC_NTC_SR2_TEMP", 2, True, 0.0, "", True), _
        New Secondary(14, "SEC_V1FaultFlag00", 2, True, 0.0, "", True), _
        New Secondary(15, "SEC_VsbFaltFlag00", 2, True, 0.0, "", True), _
        New Secondary(16, "SEC_sSysStateFg00", 2, True, 0.0, "", True), _
        New Secondary(17, "SEC_sSysStateFg01", 2, True, 0.0, "", True), _
        New Secondary(18, "SEC_VoutFlag", 2, True, 0.0, "", True), _
        New Secondary(19, "SEC_uTempOtw", 2, True, 0.0, "", True), _
        New Secondary(20, "SEC_uTempOtp", 2, True, 0.0, "", True), _
        New Secondary(21, "SEC_DioOutStatus", 2, True, 0.0, "", True), _
        New Secondary(22, "SEC_LatchFault", 2, True, 0.0, "", True), _
        New Secondary(23, "SEC_TempState", 2, True, 0.0, "", True), _
        New Secondary(24, "SEC_DEBUG_1", 2, True, 0.0, "", True), _
        New Secondary(25, "SEC_DEBUG_2", 2, True, 0.0, "", True), _
        New Secondary(26, "SEC_DEBUG_3", 2, True, 0.0, "", True), _
        New Secondary(27, "SEC_DEBUG_4", 2, True, 0.0, "", True), _
        New Secondary(28, "DEBUG_KEY", 2, True, 0.0, "", True)
        }
#End Region

#Region "EEPROM"
    Dim EEP_Rd_Data(260) As Byte
    Dim Eep_Start As Boolean = False
    Dim EEP_Wr_Data(260) As Byte
    Dim EEP_RW_Flag As Byte = 0
    Dim EEP_Delay As UInteger = 0
    Dim EEP_Rd_Addr_Pntr As UInteger = 0
    Dim EEP_Wr_Addr_Pntr As UInteger = 0
    Dim Eep_Dev_Addr As Byte = 0
    Dim Eep_CS As UInteger = 0
    Dim Write_FF As Boolean = False
    'EEPROM Structure Definitions
    Private Structure EEP_Data
        Public Start_Addr As Byte
        Public Length As Integer
        Public Descrip As String
        Public Data() As Byte
        Public Variable As Boolean
        Public Ascii As Boolean
        Public Sub New(first As Byte, second As Integer, third As String, fourth() As Byte, fifth As Boolean, sixth As Boolean)
            Start_Addr = first
            Length = second
            Descrip = third
            Data = fourth
            Variable = fifth
            Ascii = sixth
        End Sub
    End Structure
    Dim EEPROM() As EEP_Data = {
        New EEP_Data(0, 1, "Eeprom Version", {&H4}, False, False), _
        New EEP_Data(1, 1, "Compatibility", {&HFF}, True, False), _
        New EEP_Data(2, 1, "TLV type", {&H40}, False, False), _
        New EEP_Data(3, 2, "data", {&H11, &H18}, False, False), _
        New EEP_Data(4, 1, "TLV type", {&H41}, False, False), _
        New EEP_Data(5, 2, "data", {&H0, &H1}, False, False), _
        New EEP_Data(6, 1, "TLV type", {&HC0}, False, False), _
        New EEP_Data(7, 1, "TLV length", {&H46}, False, False), _
        New EEP_Data(8, 6, "data", {&H1, &H55, &H1, &H8B, &H4B, &H1}, False, False), _
        New EEP_Data(9, 1, "TLV type", {&H8D}, False, False), _
        New EEP_Data(10, 4, "data", {&H30, &H31, &H0, &H0}, False, False), _
        New EEP_Data(11, 1, "TLV type", {&H88}, False, False), _
        New EEP_Data(12, 4, "data", {&H0, &H0, &H0, &H0}, False, False), _
        New EEP_Data(13, 1, "TLV type", {&HC1}, False, False), _
        New EEP_Data(14, 1, "TLV length", {&H8B}, False, False), _
        New EEP_Data(15, 11, "data", {&H51, &H43, &H53, &H32, &H33, &H34, &H37, &H35, &H4E, &H30, &H31}, False, True), _
        New EEP_Data(16, 1, "TLV type", {&H3}, False, False), _
        New EEP_Data(17, 1, "data", {&H0}, False, False), _
        New EEP_Data(18, 1, "TLV type", {&H81}, False, False), _
        New EEP_Data(19, 4, "data", {&H0, &H0, &H0, &H0}, False, False), _
        New EEP_Data(20, 1, "TLV type", {&H4}, False, False), _
        New EEP_Data(21, 1, "data", {&H0}, False, False), _
        New EEP_Data(22, 1, "TLV type", {&HC6}, False, False), _
        New EEP_Data(23, 1, "TLV length", {&H8A}, False, False), _
        New EEP_Data(24, 10, "data", {&H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20}, False, False), _
        New EEP_Data(25, 1, "TLV type", {&HEB}, False, False), _
        New EEP_Data(26, 1, "TLV length", {&H86}, False, False), _
        New EEP_Data(27, 6, "data", {&H0, &H0, &H0, &H0, &H0, &H0}, False, False), _
        New EEP_Data(28, 1, "TLV type", {&HCB}, False, False), _
        New EEP_Data(29, 1, "TLV length", {&H94}, False, False), _
        New EEP_Data(30, 20, "data", {&H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20, &H20}, False, False), _
        New EEP_Data(31, 1, "TLV type", {&H89}, False, False), _
        New EEP_Data(32, 4, "data", {&H56, &H30, &H30, &H0}, False, False), _
        New EEP_Data(33, 1, "TLV type", {&HB}, False, False), _
        New EEP_Data(34, 1, "data", {&H0}, False, False), _
        New EEP_Data(35, 1, "TLV type", {&HF3}, False, False), _
        New EEP_Data(36, 2, "TLV length", {&H0, &H7}, False, False), _
        New EEP_Data(37, 1, "subtype", {&H2}, False, False), _
        New EEP_Data(38, 4, "data", {&H5, &HDC, &H5, &HDC}, False, False), _
        New EEP_Data(39, 2, "Checksum", {&H0, &H56}, False, False), _
        New EEP_Data(40, 1, "TLV type", {&HC4}, False, False), _
        New EEP_Data(41, 1, "TLV length", {&H8}, False, False), _
        New EEP_Data(42, 8, "data", {&H0, &H0, &H0, &H0, &H0, &H0, &H0, &H0}, False, False), _
        New EEP_Data(43, 1, "TLV type", {&HC5}, False, False), _
        New EEP_Data(44, 1, "TLV length", {&H8}, False, False), _
        New EEP_Data(45, 8, "data", {&H0, &H0, &H0, &H0, &H0, &H0, &H0, &H0}, False, False), _
        New EEP_Data(46, 1, "TLV type", {&HEF}, False, False), _
        New EEP_Data(47, 1, "TLV length", {&H2}, False, False), _
        New EEP_Data(48, 2, "Checksum", {&H0, &HC8}, False, False), _
        New EEP_Data(49, 1, "TLV End Byte", {&HFF}, False, False), _
        New EEP_Data(50, 12, "RESERVED", {&HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF}, False, False), _
        New EEP_Data(51, 16, "RESERVED", {&HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF}, False, False), _
        New EEP_Data(52, 16, "RESERVED", {&HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF}, False, False), _
        New EEP_Data(53, 16, "RESERVED", {&HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF}, False, False), _
        New EEP_Data(54, 16, "RESERVED", {&HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF}, False, False), _
        New EEP_Data(55, 16, "RESERVED", {&HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF}, False, False), _
        New EEP_Data(56, 16, "RESERVED", {&HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF}, False, False), _
        New EEP_Data(57, 16, "RESERVED", {&HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF, &HFF}, False, False)
    }
#End Region

#Region "Bootloader"
    'Processing File
    Dim Process_File_Flag As Boolean = False
    Dim Process_File_Sta As Byte = 0
    Dim Process_File_Dly As UInteger = 0
    Dim Process_Fail As Boolean = False

    Dim Hex_File_Sta As Boolean = False

    Dim Write_Row_Count As UInteger
    Dim Write_Row_Pntr As UInteger

    Dim W2R_Start_Line As UInteger
    Dim BL_Sec_Sta As Boolean = False
    Dim BL_W2R_Flag As Boolean = False
    Dim BL_W2R_Seq As Byte = 0
    Dim BL_Stby_Wr_Delay As Byte = 0
    Dim BL_Wr_Delay As UInteger = 0
    Dim BL_Wr_Wait As UInteger = 0
    Dim BL_Stat As UInteger = 0
    Dim Wr_Page_No As Byte = 0

    Dim BL_Wr_Data(72) As Byte
    Dim App_Cum_CRC As UInteger = 0

    Dim Auto_Update_Sta As Byte = 0
    Dim Auto_Up_Result As Boolean = False
    Dim Auto_Up_Res_Str As String = ""

    Dim Start_t As String
    Dim End_t As String
    Dim FW_Up_End As Byte = 15

#End Region

#End Region

#Region "Common Controls & Functions"
#Region "Controls"
    Private Sub Form1_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
        'Init pmbus Data
        Init_Pmbus_DGV(0)
        Init_Pmbus_Cnst_DGV(0)

        'Init Primary Data
        Init_Primary_DGV(0)
        'Init pmbus Data
        Init_Sec_DGV(0)
        'Init EEPROM Data
        Init_EEP(0)
        'Init Fault History
        Init_Fault_History(0)

        'TabControl1.TabPages.Remove(TabPage2)
        'TabControl1.TabPages.Remove(TabPage3)
        'TabControl1.TabPages.Remove(TabPage13)
        'TabControl1.TabPages.Remove(TabPage11)

    End Sub
    Private Sub Form1_FormClosed(ByVal sender As System.Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles MyBase.FormClosed
        If Hardware_Selection = 1 Then
            ShutdownProcedure()
        ElseIf Hardware_Selection = 2 Then
            PICkitS.Device.Cleanup()
        End If
    End Sub
    Private Sub Button14_Click(sender As System.Object, e As System.EventArgs) Handles Button14.Click
        Init_PKSA(0)
    End Sub
    Private Sub RadioButton17_Click(sender As System.Object, e As System.EventArgs) Handles RadioButton17.Click
        If Hardware_Selection = 1 Then
            RadioButton17.Checked = True
            RadioButton16.Checked = False
            RadioButton17.BackColor = Color.GreenYellow
            RadioButton16.BackColor = Color.Transparent
            SetI2CFrequency(100)
            Append_Text1("WIN-I2C Frequency Set to 100KHz" & vbCrLf)
            Dim Freq As Integer = GetI2CFrequency()
            Append_Text1("I2C Frequency Read as " & Convert.ToString(Freq, 10).ToUpper & " Khz" & vbCrLf)
        End If
    End Sub
    Private Sub RadioButton16_Click(sender As System.Object, e As System.EventArgs) Handles RadioButton16.Click
        If Hardware_Selection = 1 Then
            RadioButton17.Checked = False
            RadioButton16.Checked = True
            RadioButton17.BackColor = Color.Transparent
            RadioButton16.BackColor = Color.GreenYellow
            SetI2CFrequency(400)
            Append_Text1("WIN-I2C Frequency Set to 400KHz" & vbCrLf)
            Dim Freq As Integer = GetI2CFrequency()
            Append_Text1("I2C Frequency Read as " & Convert.ToString(Freq, 10) & " Khz" & vbCrLf)
        End If
    End Sub
    Private Sub Button2_Click(sender As System.Object, e As System.EventArgs) Handles Button2.Click
        If Poll_Button_Latched = False Then
            Poll_Button_Latched = True
            Button2.BackColor = Color.GreenYellow
        Else
            Poll_Button_Latched = False
            Button2.BackColor = Color.Transparent
        End If
    End Sub
    'Private Sub Button73_Click(sender As System.Object, e As System.EventArgs)

    '    Dim Cha_Pntr As Byte = NumericUpDown11.Value
    '    If Cha_Pntr > 24 Then
    '        Cha_Pntr = Cha_Pntr - 24
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(0, 0)    'Disable Mux 0 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(1, 0)    'Disable Mux 1 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(2, 0)    'Disable Mux 2 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(3, Cha_Pntr)
    '    ElseIf Cha_Pntr > 16 Then
    '        Cha_Pntr = Cha_Pntr - 16
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(3, 0)    'Disable Mux 3 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(1, 0)    'Disable Mux 1 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(0, 0)    'Disable Mux 0 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(2, Cha_Pntr)
    '    ElseIf Cha_Pntr > 8 Then
    '        Cha_Pntr = Cha_Pntr - 8
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(0, 0)    'Disable Mux 0 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(2, 0)    'Disable Mux 2 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(3, 0)    'Disable Mux 3 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(1, Cha_Pntr)
    '    Else
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(1, 0)    'Disable Mux 1 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(2, 0)    'Disable Mux 2 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(3, 0)    'Disable Mux 3 Ports
    '        Thread.Sleep(200)
    '        Sel_Mux_Ch(0, Cha_Pntr)
    '    End If
    'End Sub

    Private Sub Button3_Click(sender As System.Object, e As System.EventArgs) Handles Button3.Click
        If Pic_Kit_Error = False Then
            Read_All(0)
        End If
    End Sub
    Private Sub CheckBox1_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBox1.CheckedChanged
        If CheckBox1.Checked = True Then
            PEC_Sta = True
        Else
            PEC_Sta = False
        End If
    End Sub
#End Region
#Region "Functions"
    Private Sub Sel_Mux_Ch(ByVal Mux As Byte, ByVal Channel As Byte)
        Dim Return_Str As String = ""
        Dim Addr As Byte
        If Mux = 0 Then
            Addr = &HE0
        ElseIf Mux = 1 Then
            Addr = &HE2
        ElseIf Mux = 2 Then
            Addr = &HE6
        ElseIf Mux = 3 Then
            Addr = &HE4
        End If

        If Channel = 1 Then
            Write_Buf(0) = &H1
        ElseIf Channel = 2 Then
            Write_Buf(0) = &H2
        ElseIf Channel = 3 Then
            Write_Buf(0) = &H4
        ElseIf Channel = 4 Then
            Write_Buf(0) = &H8
        ElseIf Channel = 5 Then
            Write_Buf(0) = &H10
        ElseIf Channel = 6 Then
            Write_Buf(0) = &H20
        ElseIf Channel = 7 Then
            Write_Buf(0) = &H40
        ElseIf Channel = 8 Then
            Write_Buf(0) = &H80
        Else
            Write_Buf(0) = 0
        End If

        Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Return_Str & " "

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Write_Sta As Byte = I2CWriteArray(Addr, Write_Buf(0), 0, Write_Buf(0))
                If Write_Sta = 0 Then
                    ' successful, display results     
                    Append_Text1("Write Byte Sucessful - " & Convert.ToString(Write_Buf(0), 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Win_I2C_Error = True
                    Write_Buf(0) = 0
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Write(Addr, Write_Buf(0), 0, Write_Buf, Return_Str)) Then
                    ' successful, display results     
                    Append_Text1("Write Byte Sucessful - " & Convert.ToString(Write_Buf(0), 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    Write_Buf(0) = 0
                End If
            End If
        End If

        Return_Str = "-"
    End Sub
    Public Function Init_PKSA(ByVal Null_Data As Byte)
        Dim Status As Boolean = False
        If (PICkitS.Device.Initialize_PICkitSerial()) Then
            If (PICkitS.I2CM.Configure_PICkitSerial_For_I2CMaster()) Then
                PICkitS.Device.Reset_Control_Block()
                PICkitS.Device.Clear_Comm_Errors()
                PICkitS.Device.Clear_Status_Errors()
                PICkitS.I2CM.Set_I2C_Bit_Rate(100)
                PICkitS.I2CM.Set_Pullup_State(False)

                PICkitS.I2CM.Set_Aux2_Direction(False)   'set as Output
                Thread.Sleep(200)
                PICkitS.I2CM.Set_Aux2_State(True)   'set as high 
                Thread.Sleep(200)
                PICkitS.I2CM.Set_Aux2_State(False)   'set as low
                Thread.Sleep(200)
                PICkitS.I2CM.Set_Aux2_State(True)   'set as high 
                Thread.Sleep(200)

                Append_Text1("PICkit Serial Analyzer Detected & correctly configured for I2C" & vbCrLf)
            Else
                Append_Text1("Error configuring PICkit Serial for I2C" & vbCrLf)
                PICkitS.Device.Reset_Control_Block()
            End If
            Status = True
        Else
            Append_Text1("Error initializing PICkit Serial" & vbCrLf)
            PICkitS.Device.Reset_Control_Block()
        End If
        Return Status
    End Function
    Private Sub Append_Text1(ByVal Str_Data As String)
        If (RTB1_Line_Num > 1000) Then
            RichTextBox1.ReadOnly = True
            RTB1_Line_Num = 0
            RichTextBox1.Text = ""
        Else
            RichTextBox1.AppendText(Str_Data)
            RichTextBox1.SelectionStart = RichTextBox1.Text.Length
            RichTextBox1.ScrollToCaret()
        End If
        RTB1_Line_Num += 1
    End Sub
    Private Sub Read_All(ByVal Null_Data As Byte)
        Dim TabName As String = TabControl1.SelectedTab.Name
        If TabName = "TabPage1" Then
            Append_Text1("Started to Read PMBus Status Data........" & vbCrLf)
            Update_Pmbus_Data(0)
            'Send_Byte(&H3)
        ElseIf TabName = "TabPage2" Then
            If Pri_Rd_Flag = False Then
                Append_Text1("Started to Read All Primary Data........" & vbCrLf)
                Update_Pri_Status(0)
            End If
        ElseIf TabName = "TabPage3" Then
            Append_Text1("Started to Read All Secondary Data........" & vbCrLf)
            Update_Sec_Status(0)
        End If
    End Sub
    Public Function Read_Byte(ByVal Cmd_Addr As Byte)
        Dim Return_Str As String = "00 00"
        Slave_Addr = NumericUpDown1.Value

        Pmb_Hex_Data = "-"
        Pmb_Act_Data = "-"

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Read_Sta As Byte = I2CReadArray(Slave_Addr, Cmd_Addr, 2, Read_Buf(0))
                If Read_Sta = 0 Then
                    Return_Str = Process_Byte(Cmd_Addr)
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Win_I2C_Error = True
                    Read_Buf(0) = 0
                    Read_Buf(1) = 0
                    Read_Buf(2) = 0
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Read(Slave_Addr, Cmd_Addr, 2, Read_Buf, Return_Str)) Then
                    Return_Str = Process_Byte(Cmd_Addr)
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    Read_Buf(0) = 0
                    Read_Buf(1) = 0
                    Read_Buf(2) = 0
                End If
            End If
        End If
        Return Return_Str
    End Function
    Public Function Process_Byte(ByVal Cmd_Addr As Byte)
        Dim Return_Str As String = "00 00"
        Dim Return_Str_Buf As String = ""
        ' successful, display results
        'Verify CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Cmd_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)

        Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Pmb_Hex_Data = Return_Str
        Return_Str = Return_Str & " "

        Return_Str_Buf = Convert.ToString(Read_Buf(1), 16).ToUpper
        If Not Return_Str_Buf.Length = 2 Then
            Return_Str_Buf = "0" & Return_Str_Buf
        End If
        Return_Str = Return_Str & Return_Str_Buf

        If CRC8_Byte = Read_Buf(1) Or PEC_Sta = False Then
            Append_Text1("Read Byte Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & "- " & Return_Str & vbCrLf)
        Else
            Append_Text1("Read Byte PEC Error - " & Convert.ToString(Cmd_Addr, 16).ToUpper & "- " & Return_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
            PEC_Err_Flag = True
        End If
        Return Return_Str
    End Function
    Public Function Read_Word(ByVal Cmd_Addr As Byte)
        Dim Return_Str As String = "00 00 00"
        Dim Return_Str_Buf1 As String = ""
        Dim Return_Str_Buf2 As String = ""
        Slave_Addr = NumericUpDown1.Value

        Pmb_Hex_Data = "-"
        Pmb_Act_Data = "-"
        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Read_Sta As Byte = I2CReadArray(Slave_Addr, Cmd_Addr, 3, Read_Buf(0))
                If Read_Sta = 0 Then
                    Return_Str = Process_Word(Cmd_Addr)
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Win_I2C_Error = True
                    Read_Buf(0) = 0
                    Read_Buf(1) = 0
                    Read_Buf(2) = 0
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Read(Slave_Addr, Cmd_Addr, 3, Read_Buf, Return_Str)) Then
                    Return_Str = Process_Word(Cmd_Addr)
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    Read_Buf(0) = 0
                    Read_Buf(1) = 0
                    Read_Buf(2) = 0
                End If
            End If
        End If
        Return Return_Str
    End Function
    Public Function Read_Linear_Word_Pmb(ByVal Cmd_Addr As Byte, ByVal Array_Loc As Byte)
        Dim Return_Str As String = "00 00 00"
        Dim Return_Str_Buf1 As String = ""
        Dim Return_Str_Buf2 As String = ""
        Dim Data_Float As Single = 0.0
        Dim IntConverter As Integer

        Pmb_Hex_Data = "-"
        Pmb_Act_Data = "-"

        Slave_Addr = NumericUpDown1.Value

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Read_Sta As Byte = I2CReadArray(Slave_Addr, Cmd_Addr, 3, Read_Buf(0))
                If Read_Sta = 0 Then
                    Return_Str = Process_Word(Cmd_Addr)

                    If Not PMBus_Data_Struct(Array_Loc).Vout = True Then '11 bit Conversion
                        Neg_Str = ""
                        If PMBus_Data_Struct(Array_Loc).Command <= &H8F And PMBus_Data_Struct(Array_Loc).Command >= &H8D Then 'For Negative Temperature
                            Neg_T_Sta = True
                        Else
                            Neg_T_Sta = False
                        End If

                        Data_Float = Lin11_2_Float(Read_Buf)
                        Data_Float = Data_Float * 1000
                        IntConverter = Convert.ToDecimal(Data_Float)
                        Data_Float = Convert.ToSingle(IntConverter)
                        Data_Float = Data_Float / 1000
                        Pmb_Act_Data = Neg_Str & Convert.ToString(Data_Float) & PMBus_Data_Struct(Array_Loc).Resolu_Str
                    Else    '16 Bit Conversion
                        Data_Float = Lin16_2_Float(Read_Buf)
                        Data_Float = Data_Float * 1000
                        IntConverter = Convert.ToDecimal(Data_Float)
                        Data_Float = Convert.ToSingle(IntConverter)
                        Data_Float = Data_Float / 1000
                        Pmb_Act_Data = Convert.ToString(Data_Float) & PMBus_Data_Struct(Array_Loc).Resolu_Str
                    End If
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Win_I2C_Error = True
                    Read_Buf(0) = 0
                    Read_Buf(1) = 0
                    Read_Buf(2) = 0
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Read(Slave_Addr, Cmd_Addr, 3, Read_Buf, Return_Str)) Then
                    Return_Str = Process_Word(Cmd_Addr)

                    If PMBus_Data_Struct(Array_Loc).Vout = False Then '11 bit Conversion
                        Neg_Str = ""
                        If PMBus_Data_Struct(Array_Loc).Command <= &H8F And PMBus_Data_Struct(Array_Loc).Command >= &H8D Then 'For Negative Temperature
                            Neg_T_Sta = True
                        Else
                            Neg_T_Sta = False
                        End If

                        Data_Float = Lin11_2_Float(Read_Buf)
                        Data_Float = Data_Float * 1000
                        IntConverter = Convert.ToDecimal(Data_Float)
                        Data_Float = Convert.ToSingle(IntConverter)
                        Data_Float = Data_Float / 1000
                        Pmb_Act_Data = Neg_Str & Convert.ToString(Data_Float) & PMBus_Data_Struct(Array_Loc).Resolu_Str
                    Else    '16 Bit Conversion
                        Data_Float = Lin16_2_Float(Read_Buf)
                        Data_Float = Data_Float * 1000
                        IntConverter = Convert.ToDecimal(Data_Float)
                        Data_Float = Convert.ToSingle(IntConverter)
                        Data_Float = Data_Float / 1000
                        Pmb_Act_Data = Convert.ToString(Data_Float) & PMBus_Data_Struct(Array_Loc).Resolu_Str
                    End If
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    Read_Buf(0) = 0
                    Read_Buf(1) = 0
                    Read_Buf(2) = 0
                End If
            End If
        End If
        Return Return_Str
    End Function
    Public Function Read_Linear_Word_Cnst(ByVal Cmd_Addr As Byte, ByVal Array_Loc As Byte)
        Dim Return_Str As String = "00 00 00"
        Dim Return_Str_Buf1 As String = ""
        Dim Return_Str_Buf2 As String = ""
        Dim Data_Float As Single = 0.0
        Dim IntConverter As Integer

        Pmb_Hex_Data = "-"
        Pmb_Act_Data = "-"

        Slave_Addr = NumericUpDown1.Value

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Read_Sta As Byte = I2CReadArray(Slave_Addr, Cmd_Addr, 3, Read_Buf(0))
                If Read_Sta = 0 Then
                    Return_Str = Process_Word(Cmd_Addr)

                    If Not PMBus_Cnst_Struct(Array_Loc).Vout = True Then '11 bit Conversion
                        Neg_Str = ""
                        If PMBus_Cnst_Struct(Array_Loc).Command = &HA9 Then 'For Negative Temperature
                            Neg_T_Sta = True
                        Else
                            Neg_T_Sta = False
                        End If

                        Data_Float = Lin11_2_Float(Read_Buf)
                        Data_Float = Data_Float * 1000
                        IntConverter = Convert.ToDecimal(Data_Float)
                        Data_Float = Convert.ToSingle(IntConverter)
                        Data_Float = Data_Float / 1000
                        Pmb_Act_Data = Neg_Str & Convert.ToString(Data_Float) & PMBus_Cnst_Struct(Array_Loc).Resolu_Str
                    Else    '16 Bit Conversion
                        Data_Float = Lin16_2_Float(Read_Buf)
                        Data_Float = Data_Float * 1000
                        IntConverter = Convert.ToDecimal(Data_Float)
                        Data_Float = Convert.ToSingle(IntConverter)
                        Data_Float = Data_Float / 1000
                        Pmb_Act_Data = Convert.ToString(Data_Float) & PMBus_Cnst_Struct(Array_Loc).Resolu_Str
                    End If
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Win_I2C_Error = True
                    Read_Buf(0) = 0
                    Read_Buf(1) = 0
                    Read_Buf(2) = 0
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Read(Slave_Addr, Cmd_Addr, 3, Read_Buf, Return_Str)) Then
                    Return_Str = Process_Word(Cmd_Addr)

                    If PMBus_Cnst_Struct(Array_Loc).Vout = False Then '11 bit Conversion
                        Neg_Str = ""
                        If PMBus_Cnst_Struct(Array_Loc).Command = &HA9 Then 'For Negative Temperature
                            Neg_T_Sta = True
                        Else
                            Neg_T_Sta = False
                        End If

                        Data_Float = Lin11_2_Float(Read_Buf)
                        Data_Float = Data_Float * 1000
                        IntConverter = Convert.ToDecimal(Data_Float)
                        Data_Float = Convert.ToSingle(IntConverter)
                        Data_Float = Data_Float / 1000
                        Pmb_Act_Data = Neg_Str & Convert.ToString(Data_Float) & PMBus_Cnst_Struct(Array_Loc).Resolu_Str
                    Else    '16 Bit Conversion
                        Data_Float = Lin16_2_Float(Read_Buf)
                        Data_Float = Data_Float * 1000
                        IntConverter = Convert.ToDecimal(Data_Float)
                        Data_Float = Convert.ToSingle(IntConverter)
                        Data_Float = Data_Float / 1000
                        Pmb_Act_Data = Convert.ToString(Data_Float) & PMBus_Cnst_Struct(Array_Loc).Resolu_Str
                    End If
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    Read_Buf(0) = 0
                    Read_Buf(1) = 0
                    Read_Buf(2) = 0
                End If
            End If
        End If
        Return Return_Str
    End Function
    Public Function Process_Word(ByVal Cmd_Addr As Byte)
        Dim Return_Str As String = "00 00 00"
        Dim Return_Str_Buf1 As String = ""
        Dim Return_Str_Buf2 As String = ""

        ' successful, display results
        'Verify CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Cmd_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)

        Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        '  Return_Str = Return_Str & " "

        Return_Str_Buf1 = Convert.ToString(Read_Buf(1), 16).ToUpper
        If Not Return_Str_Buf1.Length = 2 Then
            Return_Str_Buf1 = "0" & Return_Str_Buf1
        End If

        Return_Str_Buf2 = Convert.ToString(Read_Buf(2), 16).ToUpper
        If Not Return_Str_Buf2.Length = 2 Then
            Return_Str_Buf2 = "0" & Return_Str_Buf2
        End If
        Pmb_Hex_Data = Return_Str_Buf1 & Return_Str

        Return_Str = Return_Str & " " & Return_Str_Buf1 & " " & Return_Str_Buf2

        If CRC8_Byte = Read_Buf(2) Or PEC_Sta = False Then
            Append_Text1("Read Word Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & "- " & Return_Str & vbCrLf)
        Else
            Append_Text1("Read Word PEC Error - " & Convert.ToString(Cmd_Addr, 16).ToUpper & "- " & Return_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
            PEC_Err_Flag = True
        End If

        Return Return_Str
    End Function
    Public Function Lin11_2_Float(ByVal Byte_Array() As Byte)
        Dim Data_Float As Single = 0.0
        Dim Data_Int1 As UInteger = 0
        Dim Data_Int2 As UInteger = 0
        Dim Data_Int3 As Short = 0

        Data_Int1 = Byte_Array(1)
        Data_Int1 *= 256
        Data_Int1 += Byte_Array(0)

        Data_Int2 = Data_Int1 And &H7FF

        If Neg_T_Sta = True And Data_Int2 > &H3FF Then
            Data_Int2 = Not Data_Int2
            Data_Int2 = Data_Int2 + 1
            Data_Int2 = Data_Int2 And &H3FF
            Neg_Str = "-"
        End If

        Data_Int1 = Data_Int1 And &HF800
        Data_Int1 = Data_Int1 >> 11
        If (Data_Int1 > 15) Then
            Data_Int3 = Data_Int1 - 32
        Else
            Data_Int3 = Data_Int1
        End If
        Data_Float = 2 ^ Data_Int3

        Data_Float = Data_Float * Data_Int2

        Return Data_Float
    End Function
    Public Function Lin16_2_Float(ByVal Byte_Array() As Byte)
        Dim Data_Float As Single = 0.0
        Dim Data_Int1 As UInteger = 0
        Dim Data_Int3 As Short = 0

        Data_Int1 = Byte_Array(1)
        Data_Int1 *= 256
        Data_Int1 += Byte_Array(0)

        Data_Int3 = Vout_Resolu
        If (Data_Int3 > 15) Then
            Data_Int3 = Data_Int3 - 32
        End If
        Data_Float = 2 ^ Data_Int3

        Data_Float = Data_Float * Data_Int1

        Return Data_Float
    End Function
    Public Function Read_Block(ByVal Cmd_Addr As Byte, ByVal Byte_Count As Byte) ' Read With Length Byte - Count Including PEC 
        Dim Return_Str As String = "00"
        Slave_Addr = NumericUpDown1.Value

        Pmb_Hex_Data = "-"
        Pmb_Act_Data = "-"

        Byte_Count = Byte_Count + 2

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Read_Sta As Byte = I2CReadArray(Slave_Addr, Cmd_Addr, Byte_Count, Read_Buf(0))
                If Read_Sta = 0 Then
                    Return_Str = Process_Block(Cmd_Addr, Byte_Count)
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Win_I2C_Error = True
                    For i = 0 To Byte_Count - 1
                        Read_Buf(i) = 0
                    Next
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Read(Slave_Addr, Cmd_Addr, Byte_Count, Read_Buf, Return_Str)) Then
                    Return_Str = Process_Block(Cmd_Addr, Byte_Count)
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    For i = 0 To Byte_Count - 1
                        Read_Buf(i) = 0
                    Next
                End If
            End If
        End If
        Return Return_Str
    End Function

    Public Function Read_Block1(ByVal Cmd_Addr As Byte, ByVal Byte_Count As Byte) ' Read With Length Byte - Count Including PEC 
        Dim Return_Str As String = "00"
        Slave_Addr = NumericUpDown1.Value

        Pmb_Hex_Data = "-"
        Pmb_Act_Data = "-"

        Byte_Count = Byte_Count + 2

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Read_Sta As Byte = I2CReadArray(Slave_Addr, Cmd_Addr, Byte_Count, Read_Buf(0))
                If Read_Sta = 0 Then
                    Return_Str = Process_Block(Cmd_Addr, Byte_Count)
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Win_I2C_Error = True
                    For i = 0 To Byte_Count - 1
                        Read_Buf(i) = 0
                    Next
                    Read_Buf_Str = ""
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Read(Slave_Addr, Cmd_Addr, Byte_Count, Read_Buf, Return_Str)) Then
                    Return_Str = Process_Block(Cmd_Addr, Byte_Count)
                Else
                    Append_Text1("Error Reading Data From the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    For i = 0 To Byte_Count - 1
                        Read_Buf(i) = 0
                    Next
                    Read_Buf_Str = ""
                End If
            End If
        End If
        Return Return_Str
    End Function
    Public Function Process_Block(ByVal Cmd_Addr As Byte, ByVal Byte_Count As Byte)
        Dim Return_Str As String = "00"
        ' successful, display results
        'Verify CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Cmd_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)
        Read_Buf_Str = ""
        For i = 0 To Byte_Count - 2
            CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(i), CRC8_Byte)
            Return_Str = Convert.ToString(Read_Buf(i), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Read_Buf_Str = Read_Buf_Str & Return_Str & " "
        Next

        Return_Str = Convert.ToString(Read_Buf(Byte_Count - 1), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Read_Buf_Str = Read_Buf_Str & Return_Str & " "

        If CRC8_Byte = Read_Buf(Byte_Count - 1) Or PEC_Sta = False Then
            Append_Text1("Read Block Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & "- " & Read_Buf_Str & vbCrLf)
        Else
            Append_Text1("Read Block PEC Error - " & Convert.ToString(Cmd_Addr, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
            PEC_Err_Flag = True
        End If
        Return Return_Str
    End Function
    Private Sub Send_Byte(ByVal Cmd_Addr As Byte)
        Dim Return_Str As String = ""
        Slave_Addr = NumericUpDown1.Value
        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Cmd_Addr, CRC8_Byte)
        Write_Buf(0) = CRC8_Byte
        Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Return_Str & " "

        Dim Data_Len As Byte = 0
        If PEC_Sta = True Then
            Data_Len = 1
        Else
            Data_Len = 0
        End If

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Write_Sta As Byte = I2CWriteArray(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf(0))
                If Write_Sta = 0 Then
                    Append_Text1("Send Byte Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Win_I2C_Error = True
                    Write_Buf(0) = 0
                    Write_Buf(1) = 0
                    Write_Buf(2) = 0
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Write(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf, Return_Str)) Then
                    ' successful, display results      
                    Append_Text1("Send Byte Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    Write_Buf(0) = 0
                    Write_Buf(1) = 0
                    Write_Buf(2) = 0
                End If
            End If
        End If
        Return_Str = "-"
    End Sub
    Private Sub Write_Byte(ByVal Cmd_Addr As Byte)
        Dim Return_Str As String = ""
        Slave_Addr = NumericUpDown1.Value
        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Cmd_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        Write_Buf(1) = CRC8_Byte
        Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Return_Str & " "
        Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Write_Buf_Str & Return_Str & " "

        Dim Data_Len As Byte = 0
        If PEC_Sta = True Then
            Data_Len = 2
        Else
            Data_Len = 1
        End If

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Write_Sta As Byte = I2CWriteArray(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf(0))
                If Write_Sta = 0 Then
                    ' successful, display results     
                    Append_Text1("Write Byte Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Win_I2C_Error = True
                    Write_Buf(0) = 0
                    Write_Buf(1) = 0
                    Write_Buf(2) = 0
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Write(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf, Return_Str)) Then
                    ' successful, display results     
                    Append_Text1("Write Byte Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    Write_Buf(0) = 0
                    Write_Buf(1) = 0
                    Write_Buf(2) = 0
                End If
            End If
        End If

        Return_Str = "-"
    End Sub
    Private Sub Write_Word(ByVal Cmd_Addr As Byte)
        Dim Return_Str As String = ""
        Slave_Addr = NumericUpDown1.Value
        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Cmd_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        Write_Buf(2) = CRC8_Byte
        Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Return_Str & " "
        Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Write_Buf_Str & Return_Str & " "
        Return_Str = Convert.ToString(Write_Buf(2), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Write_Buf_Str & Return_Str & " "

        Dim Data_Len As Byte = 0
        If PEC_Sta = True Then
            Data_Len = 3
        Else
            Data_Len = 2
        End If

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Write_Sta As Byte = I2CWriteArray(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf(0))
                If Write_Sta = 0 Then
                    ' successful, display results     
                    Append_Text1("Write Byte Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Win_I2C_Error = True
                    Write_Buf(0) = 0
                    Write_Buf(1) = 0
                    Write_Buf(2) = 0
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Write(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf, Return_Str)) Then
                    ' successful, display results     
                    Append_Text1("Write Byte Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    Write_Buf(0) = 0
                    Write_Buf(1) = 0
                    Write_Buf(2) = 0
                End If
            End If
        End If
        Return_Str = "-"
    End Sub
    Private Sub Write_Block(ByVal Cmd_Addr As Byte)
        Dim Return_Str As String = ""
        Dim i As Integer = 0
        Slave_Addr = NumericUpDown1.Value '&H64
        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Cmd_Addr, CRC8_Byte) '&HFC
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        For i = 1 To Write_Buf(0)
            CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(i), CRC8_Byte)
        Next
        Write_Buf(i) = CRC8_Byte

        ' successful, display results      
        Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Return_Str & " "

        For i = 1 To Write_Buf(0)
            Return_Str = Convert.ToString(Write_Buf(i), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "
        Next

        Return_Str = Convert.ToString(Write_Buf(i), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Write_Buf_Str & Return_Str

        Dim Data_Len As Byte = 0
        If PEC_Sta = True Then
            Data_Len = Write_Buf(0) + 2
        Else
            Data_Len = Write_Buf(0) + 1
        End If

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Write_Sta As Byte = I2CWriteArray(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf(0))
                If Write_Sta = 0 Then
                    Append_Text1("Write Block Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Win_I2C_Error = True
                    For i = 0 To Write_Buf(0)
                        Write_Buf(i) = 0
                    Next
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Write(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf, Return_Str)) Then
                    Append_Text1("Write Block Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    For i = 0 To Write_Buf(0)
                        Write_Buf(i) = 0
                    Next
                End If
            End If
        End If

        Return_Str = "-"
    End Sub

    Private Sub Write_Block_1(ByVal Cmd_Addr As Byte)
        Dim Return_Str As String = ""
        Dim i As Integer = 0
        Slave_Addr = NumericUpDown1.Value
        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Cmd_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        For i = 1 To Write_Buf(0)
            CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(i), CRC8_Byte)
        Next
        Write_Buf(i) = CRC8_Byte

        ' successful, display results      
        Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Return_Str & " "

        For i = 1 To Write_Buf(0)
            Return_Str = Convert.ToString(Write_Buf(i), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "
        Next

        Return_Str = Convert.ToString(Write_Buf(i), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Write_Buf_Str & Return_Str

        Dim Data_Len As Byte = 0

        Data_Len = Write_Buf(0) + 2

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Write_Sta As Byte = I2CWriteArray(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf(0))
                If Write_Sta = 0 Then
                    Append_Text1("Write Block Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Win_I2C_Error = True
                    For i = 0 To Write_Buf(0)
                        Write_Buf(i) = 0
                    Next
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Write(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf, Return_Str)) Then
                    Append_Text1("Write Block Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    For i = 0 To Write_Buf(0)
                        Write_Buf(i) = 0
                    Next
                End If
            End If
        End If

        Return_Str = "-"
    End Sub
    Private Sub Write_Block_NL(ByVal Cmd_Addr As Byte, ByVal len As Byte)
        Dim Return_Str As String = ""
        Dim i As Integer = 0
        Slave_Addr = NumericUpDown1.Value
        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Cmd_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        For i = 1 To len - 1
            CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(i), CRC8_Byte)
        Next
        Write_Buf(i) = CRC8_Byte

        ' successful, display results      
        Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Return_Str & " "

        For i = 1 To len - 1
            Return_Str = Convert.ToString(Write_Buf(i), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "
        Next

        Return_Str = Convert.ToString(Write_Buf(i), 16).ToUpper
        If Not Return_Str.Length = 2 Then
            Return_Str = "0" & Return_Str
        End If
        Write_Buf_Str = Write_Buf_Str & Return_Str

        Dim Data_Len As Byte = 0
        If PEC_Sta = True Then
            Data_Len = len + 1
        Else
            Data_Len = len + 0
        End If

        If Hardware_Selection = 1 Then
            If Win_I2C_Error = False Then
                Dim Write_Sta As Byte = I2CWriteArray(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf(0))
                If Write_Sta = 0 Then
                    Append_Text1("Write Block WO Length Byte Sucessful - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Win_I2C_Error = True
                    For i = 0 To Write_Buf(0)
                        Write_Buf(i) = 0
                    Next
                End If
            End If
        ElseIf Hardware_Selection = 2 Then
            If Pic_Kit_Error = False Then
                If (PICkitS.I2CM.Write(Slave_Addr, Cmd_Addr, Data_Len, Write_Buf, Return_Str)) Then
                    Append_Text1("Write Block Sucessful WO Length Byte - " & Convert.ToString(Cmd_Addr, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
                Else
                    Append_Text1("Error Writing Data to the Device" & vbCrLf)
                    Pic_Kit_Error = True
                    For i = 0 To Write_Buf(0)
                        Write_Buf(i) = 0
                    Next
                End If
            End If
        End If

        Return_Str = "-"
    End Sub
#End Region
#End Region

#Region "Pmbus Controls & Functions"
#Region "Pmbus Controls"
    Private Sub CheckBox2_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBox2.CheckedChanged
        If CheckBox2.Checked = True Then
            Mux_Sta = True
            'RadioButton9.Checked = True
            'RadioButton9.BackColor = Color.GreenYellow
        Else
            Mux_Sta = False
            RadioButton9.Checked = False
            RadioButton10.Checked = False
            RadioButton11.Checked = False
            RadioButton9.BackColor = Color.Transparent
            RadioButton10.BackColor = Color.Transparent
            RadioButton11.BackColor = Color.Transparent
        End If
    End Sub
    Private Sub RadioButton9_Click(sender As System.Object, e As System.EventArgs) Handles RadioButton9.Click, RadioButton9.Click, RadioButton9.Click

        If Mux_Sta = True Then
            Thread.Sleep(100)
            Sel_Mux_Ch(1, 0)    'Disable Mux 1 Ports
            Thread.Sleep(200)
            Sel_Mux_Ch(0, 1)

            RadioButton9.Checked = True
            RadioButton9.BackColor = Color.GreenYellow
            RadioButton10.Checked = False
            RadioButton10.BackColor = Color.Transparent
            RadioButton11.Checked = False
            RadioButton11.BackColor = Color.Transparent
        End If


    End Sub
    Private Sub RadioButton10_Click(sender As System.Object, e As System.EventArgs) Handles RadioButton10.Click, RadioButton10.Click, RadioButton10.Click

        If Mux_Sta = True Then
            Thread.Sleep(100)
            Sel_Mux_Ch(1, 0)    'Disable Mux 1 Ports
            Thread.Sleep(200)
            Sel_Mux_Ch(0, 2)
            RadioButton10.Checked = True
            RadioButton10.BackColor = Color.GreenYellow
            RadioButton9.Checked = False
            RadioButton9.BackColor = Color.Transparent
            RadioButton11.Checked = False
            RadioButton11.BackColor = Color.Transparent
        End If

    End Sub
    Private Sub RadioButton11_Click(sender As System.Object, e As System.EventArgs) Handles RadioButton11.Click, RadioButton11.Click, RadioButton11.Click

        If Mux_Sta = True Then
            Thread.Sleep(100)
            Sel_Mux_Ch(1, 0)    'Disable Mux 1 Ports
            Thread.Sleep(200)
            Sel_Mux_Ch(0, 3)
            RadioButton11.Checked = True
            RadioButton11.BackColor = Color.GreenYellow
            RadioButton9.Checked = False
            RadioButton9.BackColor = Color.Transparent
            RadioButton10.Checked = False
            RadioButton10.BackColor = Color.Transparent
        End If

    End Sub
   
    Private Sub Button5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button5.Click
        Send_Byte(&H3)
    End Sub
    Private Sub Button56_Click(sender As System.Object, e As System.EventArgs) Handles Button56.Click
        ' Page Command
        Write_Buf(0) = Convert.ToByte(NumericUpDown16.Value, 10)
        Write_Byte(&H0)
    End Sub
    Private Sub Button50_Click(sender As System.Object, e As System.EventArgs) Handles Button50.Click
        Write_Buf(0) = Convert.ToByte(NumericUpDown12.Value, 10)
        Write_Buf(1) = 0
        Write_Word(&H3B)
    End Sub
    Private Sub Button49_Click(sender As System.Object, e As System.EventArgs) Handles Button49.Click
        'Read Fan Duty
        Dim str As String = Read_Word(&H3B)
        TextBox51.Text = Pmb_Hex_Data
    End Sub
    Private Sub Button52_Click(sender As System.Object, e As System.EventArgs) Handles Button52.Click
        'Enable PMbus WP
        Write_Buf(0) = &H80
        Write_Byte(&H10)
    End Sub
    Private Sub Button51_Click(sender As System.Object, e As System.EventArgs) Handles Button51.Click
        'Disable Pmbus WP
        Write_Buf(0) = &H40
        Write_Byte(&H10)
    End Sub
    Private Sub Button12_Click(sender As System.Object, e As System.EventArgs) Handles Button12.Click
        Write_Buf(0) = &H20
        Write_Byte(&H10)
    End Sub

    Private Sub Button13_Click(sender As System.Object, e As System.EventArgs) Handles Button13.Click
        Write_Buf(0) = &H0
        Write_Byte(&H10)
    End Sub

    Private Sub Button10_Click(sender As System.Object, e As System.EventArgs) Handles Button10.Click
        'Enable EEP Wr
        Write_Buf(0) = &H9A
        Write_Byte(&HEA)
    End Sub

    Private Sub Button9_Click(sender As System.Object, e As System.EventArgs) Handles Button9.Click
        'Disable EEP Wr
        Write_Buf(0) = &H56
        Write_Byte(&HEA)
    End Sub

    Private Sub Button55_Click(sender As System.Object, e As System.EventArgs) Handles Button55.Click
        'Start ORing Test
        Write_Buf(0) = &H1
        Write_Byte(&H74)
    End Sub

    Private Sub Button53_Click(sender As System.Object, e As System.EventArgs) Handles Button53.Click
        'Reset OR-ing Latch
        Write_Buf(0) = &HFA
        Write_Buf(1) = &H0
        Write_Word(&HFB)
    End Sub
     
    Private Sub Button63_Click(sender As System.Object, e As System.EventArgs) Handles Button63.Click
        If Query = False Then
            TextBox64.Text = ""
            TextBox56.Text = ""
            TextBox63.Text = ""
            TextBox64.BackColor = Color.WhiteSmoke
            TextBox56.BackColor = Color.WhiteSmoke
            TextBox63.BackColor = Color.WhiteSmoke
            Query = True
            Dim str As String = ComboBox3.Text
            str = Mid(str, 1, 2)
            Write_Buf(0) = Convert.ToByte(str, 16)
            Write_Byte(&H1A)
            Query_Delay = 0
        End If
    End Sub
    Private Sub Button78_Click(sender As System.Object, e As System.EventArgs) Handles Button78.Click
        Write_Buf(0) = &H1
        Write_Byte(&HE0)
    End Sub
    Private Sub Button18_Click_1(sender As System.Object, e As System.EventArgs) Handles Button18.Click
        Write_Buf(0) = &H0
        Write_Byte(&HE0)
    End Sub

    Private Sub Button17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button17.Click
        'PSU ON
        Write_Buf(0) = &H80
        Write_Byte(&H1)
    End Sub
    Private Sub Button16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button16.Click
        'PSU OFF
        Write_Buf(0) = &H0
        Write_Byte(&H1)
    End Sub
    Private Sub Button48_Click(sender As System.Object, e As System.EventArgs) Handles Button48.Click
        Append_Text1("Started to Read PMBus Constant Data........" & vbCrLf)
        Update_Pmbus_Constant(0)
    End Sub
    Private Sub CheckBox16_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox16.CheckedChanged
        Update_Vout(0)
    End Sub
    Private Sub CheckBox19_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox19.CheckedChanged
        Update_Vout(0)
    End Sub
    Private Sub CheckBox27_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox27.CheckedChanged
        Update_Iout(0)
    End Sub
    Private Sub CheckBox25_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox25.CheckedChanged
        Update_Iout(0)
    End Sub
    Private Sub CheckBox43_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox43.CheckedChanged
        Update_Input(0)
    End Sub
    Private Sub CheckBox42_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox42.CheckedChanged
        Update_Input(0)
    End Sub
    Private Sub CheckBox41_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox41.CheckedChanged
        Update_Input(0)
    End Sub
    Private Sub CheckBox40_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox40.CheckedChanged
        Update_Input(0)
    End Sub
    Private Sub CheckBox39_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox39.CheckedChanged
        Update_Input(0)
    End Sub
    Private Sub CheckBox37_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox37.CheckedChanged
        Update_Input(0)
    End Sub
    Private Sub CheckBox44_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox44.CheckedChanged
        Update_Input(0)
    End Sub
    Private Sub CheckBox34_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox34.CheckedChanged
        Update_Temp(0)
    End Sub
    Private Sub CheckBox35_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox35.CheckedChanged
        Update_Temp(0)
    End Sub
    Private Sub CheckBox51_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox51.CheckedChanged
        Update_Fan(0)
    End Sub
    Private Sub CheckBox49_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox49.CheckedChanged
        Update_Fan(0)
    End Sub
    Private Sub CheckBox47_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox47.CheckedChanged
        Update_Fan(0)
    End Sub
    Private Sub CheckBox59_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox59.CheckedChanged
        Update_CML(0)
    End Sub
    Private Sub CheckBox58_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox58.CheckedChanged
        Update_CML(0)
    End Sub
    Private Sub CheckBox57_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox57.CheckedChanged
        Update_CML(0)
    End Sub
    Private Sub CheckBox56_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox56.CheckedChanged
        Update_CML(0)
    End Sub
    Private Sub CheckBox55_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox55.CheckedChanged
        Update_CML(0)
    End Sub
    Private Sub CheckBox54_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox54.CheckedChanged
        Update_CML(0)
    End Sub
    Private Sub CheckBox53_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox53.CheckedChanged
        Update_CML(0)
    End Sub
    Private Sub CheckBox60_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox60.CheckedChanged
        Update_CML(0)
    End Sub
    Private Sub CheckBox68_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox68.CheckedChanged
        Update_MFR(0)
    End Sub
    Private Sub CheckBox67_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox67.CheckedChanged
        Update_MFR(0)
    End Sub
    Private Sub CheckBox64_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox64.CheckedChanged
        Update_MFR(0)
    End Sub
    Private Sub CheckBox12_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox12.CheckedChanged
        Update_OTHER(0)
    End Sub
    Private Sub CheckBox10_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox10.CheckedChanged
        Update_OTHER(0)
    End Sub
    Private Sub CheckBox6_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox6.CheckedChanged
        Update_OTHER(0)
    End Sub
    Private Sub CheckBox69_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox69.CheckedChanged
        Update_OTHER(0)
    End Sub
    Private Sub Update_Vout(ByVal Word_Addr As Byte)
        Dim Vout_Mask As Byte = 0
        If CheckBox19.Checked = True Then
            Vout_Mask = &H80
        End If
        If CheckBox16.Checked = True Then
            Vout_Mask = Vout_Mask + &H10
        End If
       
        Dim str As String = Convert.ToString(Vout_Mask, 16).ToUpper
        If str.Length = 1 Then
            str = "0" & str
        End If
        TextBox27.Text = str
    End Sub
    Private Sub Update_Iout(ByVal Word_Addr As Byte)
        Dim Iout_Mask As Byte = 0
        If CheckBox27.Checked = True Then
            Iout_Mask = &H80
        End If
        If CheckBox25.Checked = True Then
            Iout_Mask = Iout_Mask + &H20
        End If

        Dim str As String = Convert.ToString(Iout_Mask, 16).ToUpper
        If str.Length = 1 Then
            str = "0" & str
        End If
        TextBox23.Text = str
    End Sub
    Private Sub Update_Temp(ByVal Word_Addr As Byte)
        Dim Mask As Byte = 0
        If CheckBox35.Checked = True Then
            Mask = &H80
        End If
        If CheckBox34.Checked = True Then
            Mask = Mask + &H40
        End If

        Dim str As String = Convert.ToString(Mask, 16).ToUpper
        If str.Length = 1 Then
            str = "0" & str
        End If
        TextBox21.Text = str
    End Sub
    Private Sub Update_Input(ByVal Word_Addr As Byte)
        Dim Mask As Byte = 0

        If CheckBox43.Checked = True Then
            Mask = &H80
        End If
        If CheckBox42.Checked = True Then
            Mask = Mask + &H40
        End If
        If CheckBox40.Checked = True Then
            Mask = Mask + &H10
        End If

        Dim str As String = Convert.ToString(Mask, 16).ToUpper
        If str.Length = 1 Then
            str = "0" & str
        End If
        TextBox7.Text = str
    End Sub
    Private Sub Update_Fan(ByVal Word_Addr As Byte)
        Dim Mask As Byte = 0
        If CheckBox51.Checked = True Then
            Mask = &H80
        End If
        'If CheckBox49.Checked = True Then
        '    Mask = Mask + &H20
        'End If
        If CheckBox47.Checked = True Then
            Mask = Mask + &H8
        End If

        Dim str As String = Convert.ToString(Mask, 16).ToUpper
        If str.Length = 1 Then
            str = "0" & str
        End If
        TextBox5.Text = str
    End Sub
    Private Sub Update_CML(ByVal Word_Addr As Byte)
        Dim Mask As Byte = 0
        If CheckBox59.Checked = True Then
            Mask = &H80
        End If
        If CheckBox58.Checked = True Then
            Mask = Mask + &H40
        End If
        If CheckBox57.Checked = True Then
            Mask = Mask + &H20
        End If
        If CheckBox55.Checked = True Then
            Mask = Mask + &H8
        End If
        If CheckBox53.Checked = True Then
            Mask = Mask + &H2
        End If
        If CheckBox60.Checked = True Then
            Mask = Mask + &H1
        End If
        Dim str As String = Convert.ToString(Mask, 16).ToUpper
        If str.Length = 1 Then
            str = "0" & str
        End If
        TextBox3.Text = str
    End Sub
    Private Sub Update_MFR(ByVal Word_Addr As Byte)
        Dim Mfr_Mask As Byte = 0
        If CheckBox68.Checked = True Then
            Mfr_Mask = &H1
        End If
        'If CheckBox64.Checked = True Then
        '    Vsb_Mask = Vsb_Mask + &H10
        'End If

        Dim str As String = Convert.ToString(Mfr_Mask, 16).ToUpper
        If str.Length = 1 Then
            str = "0" & str
        End If
        TextBox1.Text = str
    End Sub
    Private Sub Update_OTHER(ByVal Word_Addr As Byte)
        Dim Other_Mask As Byte = 0
        If CheckBox6.Checked = True Then
            Other_Mask = &H2
        End If
        If CheckBox69.Checked = True Then
            Other_Mask = Other_Mask + &H1
        End If

        Dim str As String = Convert.ToString(Other_Mask, 16).ToUpper
        If str.Length = 1 Then
            str = "0" & str
        End If
        TextBox31.Text = str
    End Sub

    Private Sub Button7_Click(sender As System.Object, e As System.EventArgs) Handles Button7.Click

        Write_Buf(0) = &H7A      'Status Vout Command
        Write_Buf(1) = TextBox27.Text Mod 256 'Mask Value
        Write_Word(&H1B)

    End Sub
    Private Sub Button4_Click(sender As System.Object, e As System.EventArgs) Handles Button4.Click

        Dim Return_Str As String = ""
        Dim SMB_Mask As Integer = 0

        Slave_Addr = NumericUpDown1.Value

        Write_Buf(0) = 1 ' Count
        Write_Buf(1) = &H7A ' Status Vout Command

        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(&H1B, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)

        If (PICkitS.I2CM.Write(Slave_Addr, &H1B, 2, Write_Buf, Return_Str)) Then

            'Thread.Sleep(1)

            Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "
           
            Append_Text1("Write Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Write_Buf_Str & vbCrLf)

            If (PICkitS.I2CM.Receive(Slave_Addr + 1, 3, Read_Buf, Return_Str)) Then

                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)

                Read_Buf_Str = " "
                Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                Return_Str = Convert.ToString(Read_Buf(1), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                If CRC8_Byte = Read_Buf(2) Then
                    SMB_Mask = Read_Buf(1)
                    TextBox89.Text = Convert.ToString(SMB_Mask, 10).ToUpper
                    Append_Text1("Read Block Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                Else
                    Append_Text1("Read Block PEC Error - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                End If

            Else
                Append_Text1("Error Reading Data From the Device" & vbCrLf)
                Pic_Kit_Error = True
            End If
        Else
            Append_Text1("Error Writing Data to the Device" & vbCrLf)
            Pic_Kit_Error = True
        End If
        
    End Sub

    Private Sub Button90_Click(sender As System.Object, e As System.EventArgs) Handles Button90.Click
       
        Write_Buf(0) = &H7B      'Status Iout Command
        Write_Buf(1) = TextBox23.Text Mod 256 'Mask Value
        Write_Word(&H1B)
    End Sub

    Private Sub Button89_Click(sender As System.Object, e As System.EventArgs) Handles Button89.Click
        
         Dim Return_Str As String = ""
        Dim SMB_Mask As Integer = 0

        Slave_Addr = NumericUpDown1.Value

        Write_Buf(0) = 1 ' Count
        Write_Buf(1) = &H7B ' Status Iout Command

        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(&H1B, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)

        If (PICkitS.I2CM.Write(Slave_Addr, &H1B, 2, Write_Buf, Return_Str)) Then

            'Thread.Sleep(1)

            Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "

            Append_Text1("Write Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Write_Buf_Str & vbCrLf)

            If (PICkitS.I2CM.Receive(Slave_Addr + 1, 3, Read_Buf, Return_Str)) Then

                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)

                Read_Buf_Str = " "
                Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                Return_Str = Convert.ToString(Read_Buf(1), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                If CRC8_Byte = Read_Buf(2) Then
                    SMB_Mask = Read_Buf(1)
                    TextBox89.Text = Convert.ToString(SMB_Mask, 10).ToUpper
                    Append_Text1("Read Block Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                Else
                    Append_Text1("Read Block PEC Error - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                End If

            Else
                Append_Text1("Error Reading Data From the Device" & vbCrLf)
                Pic_Kit_Error = True
            End If
        Else
            Append_Text1("Error Writing Data to the Device" & vbCrLf)
            Pic_Kit_Error = True
        End If

    End Sub

    Private Sub Button92_Click(sender As System.Object, e As System.EventArgs) Handles Button92.Click
        Write_Buf(0) = &H7D      'Status Temp Command
        Write_Buf(1) = TextBox21.Text Mod 256 'Mask Value
        Write_Word(&H1B)
    End Sub

    Private Sub Button91_Click(sender As System.Object, e As System.EventArgs) Handles Button91.Click
         Dim Return_Str As String = ""
        Dim SMB_Mask As Integer = 0

        Slave_Addr = NumericUpDown1.Value

        Write_Buf(0) = 1 ' Count
        Write_Buf(1) = &H7D ' Status Temp Command

        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(&H1B, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)

        If (PICkitS.I2CM.Write(Slave_Addr, &H1B, 2, Write_Buf, Return_Str)) Then

            'Thread.Sleep(1)

            Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "

            Append_Text1("Write Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Write_Buf_Str & vbCrLf)

            If (PICkitS.I2CM.Receive(Slave_Addr + 1, 3, Read_Buf, Return_Str)) Then

                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)

                Read_Buf_Str = " "
                Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                Return_Str = Convert.ToString(Read_Buf(1), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                If CRC8_Byte = Read_Buf(2) Then
                    SMB_Mask = Read_Buf(1)
                    TextBox89.Text = Convert.ToString(SMB_Mask, 10).ToUpper
                    Append_Text1("Read Block Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                Else
                    Append_Text1("Read Block PEC Error - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                End If

            Else
                Append_Text1("Error Reading Data From the Device" & vbCrLf)
                Pic_Kit_Error = True
            End If
        Else
            Append_Text1("Error Writing Data to the Device" & vbCrLf)
            Pic_Kit_Error = True
        End If

    End Sub

    Private Sub Button96_Click(sender As System.Object, e As System.EventArgs) Handles Button96.Click
        
        Write_Buf(0) = &H7C      'Status Input Command
        Write_Buf(1) = TextBox7.Text Mod 256 'Mask Value
        Write_Word(&H1B)
    End Sub

    Private Sub Button95_Click(sender As System.Object, e As System.EventArgs) Handles Button95.Click
         Dim Return_Str As String = ""
        Dim SMB_Mask As Integer = 0

        Slave_Addr = NumericUpDown1.Value

        Write_Buf(0) = 1 ' Count
        Write_Buf(1) = &H7C ' Status Input Command

        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(&H1B, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)

        If (PICkitS.I2CM.Write(Slave_Addr, &H1B, 2, Write_Buf, Return_Str)) Then

            'Thread.Sleep(1)

            Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "

            Append_Text1("Write Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Write_Buf_Str & vbCrLf)

            If (PICkitS.I2CM.Receive(Slave_Addr + 1, 3, Read_Buf, Return_Str)) Then

                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)

                Read_Buf_Str = " "
                Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                Return_Str = Convert.ToString(Read_Buf(1), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                If CRC8_Byte = Read_Buf(2) Then
                    SMB_Mask = Read_Buf(1)
                    TextBox89.Text = Convert.ToString(SMB_Mask, 10).ToUpper
                    Append_Text1("Read Block Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                Else
                    Append_Text1("Read Block PEC Error - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                End If

            Else
                Append_Text1("Error Reading Data From the Device" & vbCrLf)
                Pic_Kit_Error = True
            End If
        Else
            Append_Text1("Error Writing Data to the Device" & vbCrLf)
            Pic_Kit_Error = True
        End If

    End Sub

    Private Sub Button98_Click(sender As System.Object, e As System.EventArgs) Handles Button98.Click
        Write_Buf(0) = &H81      'Status Fan12 Command
        Write_Buf(1) = TextBox5.Text Mod 256 'Mask Value
        Write_Word(&H1B)
    End Sub

    Private Sub Button97_Click(sender As System.Object, e As System.EventArgs) Handles Button97.Click
         Dim Return_Str As String = ""
        Dim SMB_Mask As Integer = 0

        Slave_Addr = NumericUpDown1.Value

        Write_Buf(0) = 1 ' Count
        Write_Buf(1) = &H81 ' Status Fan12 Command

        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(&H1B, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)

        If (PICkitS.I2CM.Write(Slave_Addr, &H1B, 2, Write_Buf, Return_Str)) Then

            'Thread.Sleep(1)

            Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "

            Append_Text1("Write Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Write_Buf_Str & vbCrLf)

            If (PICkitS.I2CM.Receive(Slave_Addr + 1, 3, Read_Buf, Return_Str)) Then

                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)

                Read_Buf_Str = " "
                Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                Return_Str = Convert.ToString(Read_Buf(1), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                If CRC8_Byte = Read_Buf(2) Then
                    SMB_Mask = Read_Buf(1)
                    TextBox89.Text = Convert.ToString(SMB_Mask, 10).ToUpper
                    Append_Text1("Read Block Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                Else
                    Append_Text1("Read Block PEC Error - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                End If

            Else
                Append_Text1("Error Reading Data From the Device" & vbCrLf)
                Pic_Kit_Error = True
            End If
        Else
            Append_Text1("Error Writing Data to the Device" & vbCrLf)
            Pic_Kit_Error = True
        End If

    End Sub

    Private Sub Button100_Click(sender As System.Object, e As System.EventArgs) Handles Button100.Click
        Write_Buf(0) = &H7E      'Status CML Command
        Write_Buf(1) = TextBox3.Text Mod 256 'Mask Value
        Write_Word(&H1B)
    End Sub

    Private Sub Button99_Click(sender As System.Object, e As System.EventArgs) Handles Button99.Click
          Dim Return_Str As String = ""
        Dim SMB_Mask As Integer = 0

        Slave_Addr = NumericUpDown1.Value

        Write_Buf(0) = 1 ' Count
        Write_Buf(1) = &H7E ' Status CML Command

        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(&H1B, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)

        If (PICkitS.I2CM.Write(Slave_Addr, &H1B, 2, Write_Buf, Return_Str)) Then

            'Thread.Sleep(1)

            Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "

            Append_Text1("Write Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Write_Buf_Str & vbCrLf)

            If (PICkitS.I2CM.Receive(Slave_Addr + 1, 3, Read_Buf, Return_Str)) Then

                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)

                Read_Buf_Str = " "
                Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                Return_Str = Convert.ToString(Read_Buf(1), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                If CRC8_Byte = Read_Buf(2) Then
                    SMB_Mask = Read_Buf(1)
                    TextBox89.Text = Convert.ToString(SMB_Mask, 10).ToUpper
                    Append_Text1("Read Block Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                Else
                    Append_Text1("Read Block PEC Error - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                End If

            Else
                Append_Text1("Error Reading Data From the Device" & vbCrLf)
                Pic_Kit_Error = True
            End If
        Else
            Append_Text1("Error Writing Data to the Device" & vbCrLf)
            Pic_Kit_Error = True
        End If

    End Sub

    Private Sub Button102_Click(sender As System.Object, e As System.EventArgs) Handles Button102.Click
        Write_Buf(0) = &H80      'Status MFR Command
        Write_Buf(1) = TextBox1.Text Mod 256 'Mask Value
        Write_Word(&H1B)
    End Sub

    Private Sub Button101_Click(sender As System.Object, e As System.EventArgs) Handles Button101.Click
         Dim Return_Str As String = ""
        Dim SMB_Mask As Integer = 0

        Slave_Addr = NumericUpDown1.Value

        Write_Buf(0) = 1 ' Count
        Write_Buf(1) = &H80 ' Status MFR Command

        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(&H1B, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)

        If (PICkitS.I2CM.Write(Slave_Addr, &H1B, 2, Write_Buf, Return_Str)) Then

            'Thread.Sleep(1)

            Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "

            Append_Text1("Write Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Write_Buf_Str & vbCrLf)

            If (PICkitS.I2CM.Receive(Slave_Addr + 1, 3, Read_Buf, Return_Str)) Then

                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)

                Read_Buf_Str = " "
                Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                Return_Str = Convert.ToString(Read_Buf(1), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                If CRC8_Byte = Read_Buf(2) Then
                    SMB_Mask = Read_Buf(1)
                    TextBox89.Text = Convert.ToString(SMB_Mask, 10).ToUpper
                    Append_Text1("Read Block Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                Else
                    Append_Text1("Read Block PEC Error - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                End If

            Else
                Append_Text1("Error Reading Data From the Device" & vbCrLf)
                Pic_Kit_Error = True
            End If
        Else
            Append_Text1("Error Writing Data to the Device" & vbCrLf)
            Pic_Kit_Error = True
        End If

    End Sub

    Private Sub Button104_Click(sender As System.Object, e As System.EventArgs) Handles Button104.Click
        Write_Buf(0) = &H7F      'Status Other Command
        Write_Buf(1) = TextBox31.Text Mod 256 'Mask Value
        Write_Word(&H1B)
    End Sub

    Private Sub Button103_Click(sender As System.Object, e As System.EventArgs) Handles Button103.Click
          Dim Return_Str As String = ""
        Dim SMB_Mask As Integer = 0

        Slave_Addr = NumericUpDown1.Value

        Write_Buf(0) = 1 ' Count
        Write_Buf(1) = &H7F ' Status Other Command

        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(&H1B, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)

        If (PICkitS.I2CM.Write(Slave_Addr, &H1B, 2, Write_Buf, Return_Str)) Then

            'Thread.Sleep(1)

            Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "

            Append_Text1("Write Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Write_Buf_Str & vbCrLf)

            If (PICkitS.I2CM.Receive(Slave_Addr + 1, 3, Read_Buf, Return_Str)) Then

                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)

                Read_Buf_Str = " "
                Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                Return_Str = Convert.ToString(Read_Buf(1), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                If CRC8_Byte = Read_Buf(2) Then
                    SMB_Mask = Read_Buf(1)
                    TextBox89.Text = Convert.ToString(SMB_Mask, 10).ToUpper
                    Append_Text1("Read Block Sucessful - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                Else
                    Append_Text1("Read Block PEC Error - " & Convert.ToString(&H1B, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                End If

            Else
                Append_Text1("Error Reading Data From the Device" & vbCrLf)
                Pic_Kit_Error = True
            End If
        Else
            Append_Text1("Error Writing Data to the Device" & vbCrLf)
            Pic_Kit_Error = True
        End If

    End Sub

    Private Sub Button105_Click(sender As System.Object, e As System.EventArgs) Handles Button105.Click
        Write_Buf(0) = Convert.ToByte(TextBox32.Text, 10) ' Count
        Write_Buf(1) = Convert.ToByte(NumericUpDown15.Value, 10) 'Page
        Write_Buf(2) = Convert.ToByte(TextBox54.Text, 10)      'Command Code
        Write_Buf(3) = Convert.ToByte(TextBox10.Text Mod 256, 10) 'Data LSB
        Write_Buf(3) = Convert.ToByte(TextBox10.Text \ 256, 10) 'Data MSB
        Write_Block(&H5)
    End Sub

    Private Sub Button106_Click(sender As System.Object, e As System.EventArgs) Handles Button106.Click
        Dim Return_Str As String = ""
        Dim SMB_Mask As Integer = 0

        Slave_Addr = NumericUpDown1.Value

        Write_Buf(0) = Convert.ToByte(TextBox69.Text, 10) ' Count
        Write_Buf(1) = Convert.ToByte(NumericUpDown17.Value, 10) 'Page
        Write_Buf(2) = Convert.ToByte(TextBox68.Text, 10)  'Command Code

        'Compute CRC 8 
        CRC8_Byte = 0
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(&H6, CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(0), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(1), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Write_Buf(2), CRC8_Byte)
        CRC8_Byte = PICkitS.Utilities.calculate_crc8(Slave_Addr + 1, CRC8_Byte)

        If (PICkitS.I2CM.Write(Slave_Addr, &H6, 3, Write_Buf, Return_Str)) Then
            'Thread.Sleep(1)

            Return_Str = Convert.ToString(Write_Buf(0), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(1), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "
            Return_Str = Convert.ToString(Write_Buf(2), 16).ToUpper
            If Not Return_Str.Length = 2 Then
                Return_Str = "0" & Return_Str
            End If
            Write_Buf_Str = Write_Buf_Str & Return_Str & " "

            Append_Text1("Write Sucessful - " & Convert.ToString(&H6, 16).ToUpper & "- " & Write_Buf_Str & vbCrLf)

            If (PICkitS.I2CM.Receive(Slave_Addr + 1, 4, Read_Buf, Return_Str)) Then

                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(0), CRC8_Byte)
                CRC8_Byte = PICkitS.Utilities.calculate_crc8(Read_Buf(1), CRC8_Byte)
                Read_Buf_Str = " "
                Return_Str = Convert.ToString(Read_Buf(0), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                Return_Str = Convert.ToString(Read_Buf(1), 16).ToUpper
                If Not Return_Str.Length = 2 Then
                    Return_Str = "0" & Return_Str
                End If
                Read_Buf_Str = Read_Buf_Str & Return_Str & " "

                If CRC8_Byte = Read_Buf(3) Then

                    TextBox75.Text = Convert.ToString(Read_Buf(0), 10).ToUpper

                    If Read_Buf(0) > 1 Then
                        SMB_Mask = Read_Buf(1) + (Read_Buf(2) * 256)
                    Else
                        SMB_Mask = Read_Buf(1)
                    End If

                    TextBox71.Text = Convert.ToString(SMB_Mask, 10).ToUpper
                    Append_Text1("Read Block Sucessful - " & Convert.ToString(&H6, 16).ToUpper & "- " & Read_Buf_Str & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                Else
                    Append_Text1("Read Block PEC Error - " & Convert.ToString(&H6, 16).ToUpper & "- " & Read_Buf_Str & "- CRC8 -" & Convert.ToString(CRC8_Byte, 16).ToUpper & vbCrLf)
                End If

            Else
                Append_Text1("Error Reading Data From the Device" & vbCrLf)
                Pic_Kit_Error = True
            End If
        Else
            Append_Text1("Error Writing Data to the Device" & vbCrLf)
            Pic_Kit_Error = True
        End If
    End Sub

    Private Sub Button15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button15.Click
        If Capture_Data = False Then
            SaveFileDialog1.FileName = "Juniper_Oban_2200_Fan_Profile_xx'C_xL_xxx.csv"
            SaveFileDialog1.InitialDirectory = "C:\Senthil\SENTHILKUMAR\PROJECTS\Juniper Oban - 2.2KW\Others\Fan Speed Profile"
            If SaveFileDialog1.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
                Dim bytes() As Byte
                bytes = Encoding.ASCII.GetBytes("Date & Time,T Ambient,T Hotspot,T Outlet,Fan Speed" & vbCrLf)

                Log_File_Name = SaveFileDialog1.FileName
                My.Computer.FileSystem.WriteAllBytes(Log_File_Name, bytes, False)
                Button15.BackColor = Color.Green
                Data_Arr_Pntr = 0
                Capture_Data = True
                Capture_Data_Pntr = 0
            End If
        End If
    End Sub
    Private Sub Button6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button6.Click
        If Capture_Data = True Then
            Capture_Data = False
            Button6.BackColor = Color.Yellow
        ElseIf Button15.BackColor = Color.Green Then
            Capture_Data = True
            Button6.BackColor = Color.Transparent
        End If
    End Sub
    Private Sub Button11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button11.Click
        If Capture_Data = True Then
            Capture_Data = False
            Update_Log_to_file(0)
            Button15.BackColor = Color.Transparent
        End If
    End Sub
#End Region
#Region "Pmbus Functions"
    Private Sub Init_Pmbus_DGV(ByVal Null_Data As Byte)
        Dim Arr_Len As Byte = PMBus_Data_Struct.Length
        For Arr_Loc As Byte = 0 To Arr_Len - 1
            DataGridView1.Rows.Add(1)
            DataGridView1.Rows(Arr_Loc).Cells(0).Value() = Convert.ToString(PMBus_Data_Struct(Arr_Loc).Command, 16).ToUpper
            DataGridView1.Rows(Arr_Loc).Cells(1).Value() = PMBus_Data_Struct(Arr_Loc).Cmd_Name
        Next
    End Sub
    Private Sub Init_Pmbus_Cnst_DGV(ByVal Null_Data As Byte)
        Dim Arr_Len As Byte = PMBus_Cnst_Struct.Length
        For Arr_Loc As Byte = 0 To Arr_Len - 1
            DataGridView4.Rows.Add(1)
            DataGridView4.Rows(Arr_Loc).Cells(0).Value() = Convert.ToString(PMBus_Cnst_Struct(Arr_Loc).Command, 16).ToUpper
            DataGridView4.Rows(Arr_Loc).Cells(1).Value() = PMBus_Cnst_Struct(Arr_Loc).Cmd_Name
        Next
    End Sub
    Private Sub Update_Pmbus_Constant(ByVal Null_Data As Byte)
        Dim str As String
        Dim Arr_Len As Byte = PMBus_Cnst_Struct.Length
        For Arr_Loc = 0 To Arr_Len - 1
            If PMBus_Cnst_Struct(Arr_Loc).RW_Length = 1 Then
                DataGridView4.Rows(Arr_Loc).Cells(2).Value() = Read_Byte(PMBus_Cnst_Struct(Arr_Loc).Command) 'Returns All Data With PEC
                DataGridView4.Rows(Arr_Loc).Cells(3).Value() = Pmb_Hex_Data
                DataGridView4.Rows(Arr_Loc).Cells(4).Value() = Pmb_Act_Data
            ElseIf PMBus_Cnst_Struct(Arr_Loc).RW_Length = 2 Then
                If PMBus_Cnst_Struct(Arr_Loc).Data = False Then
                    DataGridView4.Rows(Arr_Loc).Cells(2).Value() = Read_Word(PMBus_Cnst_Struct(Arr_Loc).Command) 'Returns All Data With PEC
                    DataGridView4.Rows(Arr_Loc).Cells(3).Value() = Pmb_Hex_Data
                    DataGridView4.Rows(Arr_Loc).Cells(4).Value() = Pmb_Act_Data
                Else
                    DataGridView4.Rows(Arr_Loc).Cells(2).Value() = Read_Linear_Word_Cnst(PMBus_Cnst_Struct(Arr_Loc).Command, Arr_Loc) 'Returns All Data With PEC
                    DataGridView4.Rows(Arr_Loc).Cells(3).Value() = Pmb_Hex_Data
                    DataGridView4.Rows(Arr_Loc).Cells(4).Value() = Pmb_Act_Data
                End If
            ElseIf PMBus_Cnst_Struct(Arr_Loc).RW_Length > 2 Then
                DataGridView4.Rows(Arr_Loc).Cells(2).Value() = Read_Block(PMBus_Cnst_Struct(Arr_Loc).Command, PMBus_Cnst_Struct(Arr_Loc).RW_Length) 'Returns All Data With PEC
                DataGridView4.Rows(Arr_Loc).Cells(3).Value() = Pmb_Hex_Data
                DataGridView4.Rows(Arr_Loc).Cells(4).Value() = Pmb_Act_Data

                If PMBus_Cnst_Struct(Arr_Loc).Command = &HF5 Then 'Cisco_FW_REVISION
                    str = Convert.ToString(Read_Buf(1), 16) & " "
                    str = str & Convert.ToString(Read_Buf(2), 16) & " "
                    str = str & Convert.ToString(Read_Buf(3), 16) & " "
                    str = str & Convert.ToString(Read_Buf(4), 16) & " "
                    str = str & Convert.ToString(Read_Buf(5), 16) & " "
                    str = str & Convert.ToString(Read_Buf(6), 16) & " "
                    DataGridView4.Rows(Arr_Loc).Cells(3).Value() = str & Convert.ToString(Read_Buf(7), 16)
                    DataGridView4.Rows(Arr_Loc).Cells(4).Value() = ascii.GetString(Read_Buf, 1, 7)
                ElseIf PMBus_Cnst_Struct(Arr_Loc).Command = &HF6 Then 'BL_REVISION
                    str = Convert.ToString(Read_Buf(1), 16) & " "
                    str = str & Convert.ToString(Read_Buf(2), 16) & " "
                    str = str & Convert.ToString(Read_Buf(3), 16) & " "
                    str = str & Convert.ToString(Read_Buf(4), 16) & " "
                    str = str & Convert.ToString(Read_Buf(5), 16) & " "
                    str = str & Convert.ToString(Read_Buf(6), 16) & " "
                    DataGridView4.Rows(Arr_Loc).Cells(3).Value() = str & Convert.ToString(Read_Buf(7), 16)
                    DataGridView4.Rows(Arr_Loc).Cells(4).Value() = ascii.GetString(Read_Buf, 1, 7)
                ElseIf PMBus_Cnst_Struct(Arr_Loc).Command = &HF7 Then 'QCS_FW_REVISION
                    str = Convert.ToString(Read_Buf(1), 16) & " "
                    str = str & Convert.ToString(Read_Buf(2), 16) & " "
                    str = str & Convert.ToString(Read_Buf(3), 16) & " "
                    str = str & Convert.ToString(Read_Buf(4), 16) & " "
                    str = str & Convert.ToString(Read_Buf(5), 16) & " "
                    str = str & Convert.ToString(Read_Buf(6), 16) & " "
                    DataGridView4.Rows(Arr_Loc).Cells(3).Value() = str & Convert.ToString(Read_Buf(7), 16)
                    DataGridView4.Rows(Arr_Loc).Cells(4).Value() = str 'ascii.GetString(Read_Buf, 1, 7)
                End If
            End If
        Next
    End Sub
    Private Sub Update_Pmbus_Data(ByVal Null_Data As Byte)
        Dim Arr_Len As Byte = PMBus_Data_Struct.Length
        For Arr_Loc = 0 To Arr_Len - 1
            If PMBus_Data_Struct(Arr_Loc).RW_Length = 1 Then
                DataGridView1.Rows(Arr_Loc).Cells(2).Value() = Read_Byte(PMBus_Data_Struct(Arr_Loc).Command) 'Returns All Data With PEC
                DataGridView1.Rows(Arr_Loc).Cells(3).Value() = Pmb_Hex_Data
                DataGridView1.Rows(Arr_Loc).Cells(4).Value() = Pmb_Act_Data
            ElseIf PMBus_Data_Struct(Arr_Loc).RW_Length = 2 Then
                If PMBus_Data_Struct(Arr_Loc).Data = False Then
                    DataGridView1.Rows(Arr_Loc).Cells(2).Value() = Read_Word(PMBus_Data_Struct(Arr_Loc).Command) 'Returns All Data With PEC
                    DataGridView1.Rows(Arr_Loc).Cells(3).Value() = Pmb_Hex_Data
                    DataGridView1.Rows(Arr_Loc).Cells(4).Value() = Pmb_Act_Data
                Else
                    DataGridView1.Rows(Arr_Loc).Cells(2).Value() = Read_Linear_Word_Pmb(PMBus_Data_Struct(Arr_Loc).Command, Arr_Loc) 'Returns All Data With PEC
                    DataGridView1.Rows(Arr_Loc).Cells(3).Value() = Pmb_Hex_Data
                    DataGridView1.Rows(Arr_Loc).Cells(4).Value() = Pmb_Act_Data
                End If
            End If
        Next
        If Pic_Kit_Error = False Then
            'Update Pmbus Status Bits
            Dim Bits As Byte

            'Status Word - LSB
            Dim str As String = DataGridView1.Rows(2).Cells(3).Value()
            str = Mid(str, 3, 2)
            Bits = Convert.ToByte(str, 16)

            If (Bits And &H80) = &H80 Then
                PictureBox8.BackColor = Color.Red
            Else
                PictureBox8.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox7.BackColor = Color.Red
            Else
                PictureBox7.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox6.BackColor = Color.Red
            Else
                PictureBox6.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox5.BackColor = Color.Red
            Else
                PictureBox5.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox4.BackColor = Color.Red
            Else
                PictureBox4.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox3.BackColor = Color.Red
            Else
                PictureBox3.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox2.BackColor = Color.Red
            Else
                PictureBox2.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox1.BackColor = Color.Red
            Else
                PictureBox1.BackColor = Color.Gainsboro
            End If

            'Status Word - MSB
            str = DataGridView1.Rows(2).Cells(3).Value()
            str = Mid(str, 1, 2)
            Bits = Convert.ToByte(str, 16)

            If (Bits And &H80) = &H80 Then
                PictureBox16.BackColor = Color.Red
            Else
                PictureBox16.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox14.BackColor = Color.Red
            Else
                PictureBox14.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox12.BackColor = Color.Red
            Else
                PictureBox12.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox10.BackColor = Color.Red
            Else
                PictureBox10.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox15.BackColor = Color.Red
            Else
                PictureBox15.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox11.BackColor = Color.Red
            Else
                PictureBox11.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox13.BackColor = Color.Red
            Else
                PictureBox13.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox9.BackColor = Color.Red
            Else
                PictureBox9.BackColor = Color.Gainsboro
            End If

            'Status VOUT
            Bits = Convert.ToUInt16(DataGridView1.Rows(3).Cells(3).Value(), 16)

            If (Bits And &H80) = &H80 Then
                PictureBox24.BackColor = Color.Red
            Else
                PictureBox24.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox22.BackColor = Color.Red
            Else
                PictureBox22.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox20.BackColor = Color.Red
            Else
                PictureBox20.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox18.BackColor = Color.Red
            Else
                PictureBox18.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox23.BackColor = Color.Red
            Else
                PictureBox23.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox19.BackColor = Color.Red
            Else
                PictureBox19.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox21.BackColor = Color.Red
            Else
                PictureBox21.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox17.BackColor = Color.Red
            Else
                PictureBox17.BackColor = Color.Gainsboro
            End If

            'Status IOUT
            Bits = Convert.ToUInt16(DataGridView1.Rows(4).Cells(3).Value(), 16)

            If (Bits And &H80) = &H80 Then
                PictureBox32.BackColor = Color.Red
            Else
                PictureBox32.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox30.BackColor = Color.Red
            Else
                PictureBox30.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox28.BackColor = Color.Red
            Else
                PictureBox28.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox26.BackColor = Color.Red
            Else
                PictureBox26.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox31.BackColor = Color.Red
            Else
                PictureBox31.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox27.BackColor = Color.Red
            Else
                PictureBox27.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox29.BackColor = Color.Red
            Else
                PictureBox29.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox25.BackColor = Color.Red
            Else
                PictureBox25.BackColor = Color.Gainsboro
            End If

            'Status Input
            Bits = Convert.ToUInt16(DataGridView1.Rows(5).Cells(3).Value(), 16)

            If (Bits And &H80) = &H80 Then
                PictureBox56.BackColor = Color.Red
            Else
                PictureBox56.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox48.BackColor = Color.Red
            Else
                PictureBox48.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox40.BackColor = Color.Red
            Else
                PictureBox40.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox34.BackColor = Color.Red
            Else
                PictureBox34.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox52.BackColor = Color.Red
            Else
                PictureBox52.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox36.BackColor = Color.Red
            Else
                PictureBox36.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox44.BackColor = Color.Red
            Else
                PictureBox44.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox33.BackColor = Color.Red
            Else
                PictureBox33.BackColor = Color.Gainsboro
            End If

            'Status Temperature
            Bits = Convert.ToUInt16(DataGridView1.Rows(6).Cells(3).Value(), 16)

            If (Bits And &H80) = &H80 Then
                PictureBox60.BackColor = Color.Red
            Else
                PictureBox60.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox54.BackColor = Color.Red
            Else
                PictureBox54.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox46.BackColor = Color.Red
            Else
                PictureBox46.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox38.BackColor = Color.Red
            Else
                PictureBox38.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox58.BackColor = Color.Red
            Else
                PictureBox58.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox42.BackColor = Color.Red
            Else
                PictureBox42.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox50.BackColor = Color.Red
            Else
                PictureBox50.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox35.BackColor = Color.Red
            Else
                PictureBox35.BackColor = Color.Gainsboro
            End If

            'Status CML
            Bits = Convert.ToUInt16(DataGridView1.Rows(7).Cells(3).Value(), 16)

            If (Bits And &H80) = &H80 Then
                PictureBox62.BackColor = Color.Red
            Else
                PictureBox62.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox57.BackColor = Color.Red
            Else
                PictureBox57.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox49.BackColor = Color.Red
            Else
                PictureBox49.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox41.BackColor = Color.Red
            Else
                PictureBox41.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox61.BackColor = Color.Red
            Else
                PictureBox61.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox45.BackColor = Color.Red
            Else
                PictureBox45.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox53.BackColor = Color.Red
            Else
                PictureBox53.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox37.BackColor = Color.Red
            Else
                PictureBox37.BackColor = Color.Gainsboro
            End If

            'Status Fan 1 & 2
            Bits = Convert.ToUInt16(DataGridView1.Rows(10).Cells(3).Value(), 16)

            If (Bits And &H80) = &H80 Then
                PictureBox168.BackColor = Color.Red
            Else
                PictureBox168.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox166.BackColor = Color.Red
            Else
                PictureBox166.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox164.BackColor = Color.Red
            Else
                PictureBox164.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox162.BackColor = Color.Red
            Else
                PictureBox162.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox167.BackColor = Color.Red
            Else
                PictureBox167.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox163.BackColor = Color.Red
            Else
                PictureBox163.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox165.BackColor = Color.Red
            Else
                PictureBox165.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox161.BackColor = Color.Red
            Else
                PictureBox161.BackColor = Color.Gainsboro
            End If

            'Status Other
            Bits = Convert.ToUInt16(DataGridView1.Rows(8).Cells(3).Value(), 16)

            If (Bits And &H80) = &H80 Then
                PictureBox39.BackColor = Color.Red
            Else
                PictureBox39.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox47.BackColor = Color.Red
            Else
                PictureBox47.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox55.BackColor = Color.Red
            Else
                PictureBox55.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox63.BackColor = Color.Red
            Else
                PictureBox63.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox43.BackColor = Color.Red
            Else
                PictureBox43.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox59.BackColor = Color.Red
            Else
                PictureBox59.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox51.BackColor = Color.Red
            Else
                PictureBox51.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox64.BackColor = Color.Red
            Else
                PictureBox64.BackColor = Color.Gainsboro
            End If

            'Status MFR
            Bits = Convert.ToUInt16(DataGridView1.Rows(9).Cells(3).Value(), 16)

            If (Bits And &H80) = &H80 Then
                PictureBox169.BackColor = Color.Red
            Else
                PictureBox169.BackColor = Color.Gainsboro
            End If

            If (Bits And &H40) = &H40 Then
                PictureBox171.BackColor = Color.Red
            Else
                PictureBox171.BackColor = Color.Gainsboro
            End If

            If (Bits And &H20) Then
                PictureBox173.BackColor = Color.Red
            Else
                PictureBox173.BackColor = Color.Gainsboro
            End If

            If (Bits And &H10) = &H10 Then
                PictureBox175.BackColor = Color.Red
            Else
                PictureBox175.BackColor = Color.Gainsboro
            End If

            If (Bits And &H8) = &H8 Then
                PictureBox170.BackColor = Color.Red
            Else
                PictureBox170.BackColor = Color.Gainsboro
            End If

            If (Bits And &H4) = &H4 Then
                PictureBox174.BackColor = Color.Red
            Else
                PictureBox174.BackColor = Color.Gainsboro
            End If

            If (Bits And &H2) = &H2 Then
                PictureBox172.BackColor = Color.Red
            Else
                PictureBox172.BackColor = Color.Gainsboro
            End If

            If (Bits And &H1) = &H1 Then
                PictureBox176.BackColor = Color.Red
            Else
                PictureBox176.BackColor = Color.Gainsboro
            End If


        End If
    End Sub
    Private Sub Update_Log_to_file(ByVal Null_Data As Byte)
        If Not Data_Arr_Pntr = 0 Then
            Dim i As UInteger = 0
            For i = 0 To Data_Arr_Pntr - 1
                Dim bytes() As Byte
                bytes = Encoding.ASCII.GetBytes(Data_Str(i) & vbCrLf)
                My.Computer.FileSystem.WriteAllBytes(Log_File_Name, bytes, True)
            Next
            Data_Arr_Pntr = 0
        End If
    End Sub
#End Region
#End Region

#Region "Internal Data Controls & Functions"
#Region "Controls"
#End Region
#Region "Functions"
    Private Sub Button8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button8.Click
        'Unlock Debug Mode
        Write_Buf(0) = &H55
        Write_Buf(1) = &H4C
        Write_Word(&HFB)
    End Sub

    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        'lock Debug Mode
        Write_Buf(0) = &HAA
        Write_Buf(1) = &HAA
        Write_Word(&HFB)
    End Sub

    Private Sub Process_Cal_Data(ByVal Null_Data As Byte)
        If x1 = x2 Then
            k = 0
            b = 0 'y1
        Else
            k = (y2 - y1) / (x2 - x1)

        End If

        Gain_Temp = (RANGE * k)
        If Gain_Temp < 0 Then
            Gain = (65536 + Gain_Temp)
        Else
            Gain = Gain_Temp
        End If

        Cal_temp = (Gain * x1 / RANGE)
        b = (y1 - Cal_temp)

        offset_temp = b
        If offset_temp < 0 Then
            Offset = (65536 + offset_temp)
        Else
            Offset = offset_temp
        End If
    End Sub
    Private Sub Process_Cal_Current_Share(ByVal Null_Data As Byte)

        If x1 = x2 Then
            k = 4096
            b = 0 'y1
        Else
            k = (z2 - z1) / (y2 - y1)
            b = ((z1 - y1) * x2 - (z2 - y2) * x1) / (y2 - y1)
        End If

        Gain_Temp = (RANGE * k)
        If Gain_Temp < 0 Then
            Gain = (65536 + Gain_Temp)
        Else
            Gain = Gain_Temp
        End If

        offset_temp = b
        If offset_temp < 0 Then
            Offset = (65536 + offset_temp)
        Else
            Offset = offset_temp
        End If
    End Sub

    Private Sub Process_Cal_Data1(ByVal Null_Data As Byte)

        If x1 = x2 Then
            k = 0
            b = 0 'y1
        Else
            k = (y2 - y1) / (x2 - x1)
            Cal_temp = (k * x1)
            b = (y1 - Cal_temp)
        End If

        Gain_Temp = (RANGE * k)
        Gain_Temp = Gain_Temp - RANGE
        If Gain_Temp < 0 Then
            Gain = (256 + Gain_Temp)
        Else
            Gain = Gain_Temp
        End If
        'If RANGE > Gain_Temp Then
        '    Gain_Temp = RANGE - Gain_Temp
        'Else
        '    Gain_Temp = Gain_Temp - RANGE
        'End If

        offset_temp = b * PMBus_Factor
        If offset_temp < 0 Then
            Offset = (65535 + offset_temp)
        Else
            Offset = offset_temp
        End If

    End Sub
#End Region
#End Region
#Region "Primary Controls & Functions"
#Region "Controls"

   

    Private Sub Button33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'Clear Sticky Alarm 
        Write_Buf(0) = 8
        Write_Buf(1) = &H12
        Write_Buf(2) = 0
        Write_Buf(3) = 0
        Write_Buf(4) = 0
        Write_Buf(5) = 0
        Write_Buf(6) = 0
        Write_Buf(7) = 0
        Write_Block(&HF6)
    End Sub
    Private Sub Button32_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'Enable PFC
        Write_Buf(0) = 8
        Write_Buf(1) = &H14
        Write_Buf(2) = 0
        Write_Buf(3) = 0
        Write_Buf(4) = 0
        Write_Buf(5) = 0
        Write_Buf(6) = 0
        Write_Buf(7) = 0
        Write_Block(&HF6)

    End Sub
    Private Sub Button34_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'Disable PFC
        Write_Buf(0) = 8
        Write_Buf(1) = &H15
        Write_Buf(2) = 0
        Write_Buf(3) = 0
        Write_Buf(4) = 0
        Write_Buf(5) = 0
        Write_Buf(6) = 0
        Write_Buf(7) = 0
        Write_Block(&HF6)

    End Sub
    Private Sub Button35_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'Start Getting Cal Data
        Read_Cal_Data = True
    End Sub
  


#End Region
#Region "Functions"
    Private Sub Init_Primary_DGV(ByVal Null_Data As Byte)
        Dim Arr_Len As Byte = Primary_Data_Struct.Length
        Dim Act_Loc As Byte = 0
        For Arr_Loc As Byte = 0 To Arr_Len - 1
            If Primary_Data_Struct(Arr_Loc).Visible = True Then
                DataGridView2.Rows.Add(1)
                DataGridView2.Rows(Act_Loc).Cells(0).Value() = Convert.ToString(Primary_Data_Struct(Arr_Loc).Addr, 16).ToUpper
                DataGridView2.Rows(Act_Loc).Cells(1).Value() = Primary_Data_Struct(Arr_Loc).Reg_Name
                Act_Loc = Act_Loc + 1
            End If
        Next
    End Sub
    Private Sub Update_Pri_Status(ByVal Null_Data As Byte)

        Dim StatusBitTemp(8) As Boolean
        Dim ReadDataTemp As Byte = &H0
        Dim Bits As Byte
        Dim str As String
        Dim Temp_str As String = ""

        'Vin_ADC
        Write_Buf(0) = &H0
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Dim Word_Data As UInteger = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(0).Cells(2).Value() = Temp_str
        DataGridView2.Rows(0).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'Iin_ADC
        Write_Buf(0) = &H1
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(1).Cells(2).Value() = Temp_str
        DataGridView2.Rows(1).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'Pin_ADC
        Write_Buf(0) = &H2
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(2).Cells(2).Value() = Temp_str
        DataGridView2.Rows(2).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper


        'Vbulk_ADC
        Write_Buf(0) = &H3
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(3).Cells(2).Value() = Temp_str
        DataGridView2.Rows(3).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'PFC_NTC_ADC
        Write_Buf(0) = &H5
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(4).Cells(2).Value() = Temp_str
        DataGridView2.Rows(4).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper


        'Input Status0
        Write_Buf(0) = &H6
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(5).Cells(2).Value() = Temp_str

        'Status0 MSB - addr 1
        Bits = Read_Buf(1)

        If (Bits And &H80) = &H80 Then
            PictureBox159.BackColor = Color.Red
        Else
            PictureBox159.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox138.BackColor = Color.Red
        Else
            PictureBox138.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox126.BackColor = Color.Red
        Else
            PictureBox126.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox115.BackColor = Color.Red
        Else
            PictureBox115.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox147.BackColor = Color.Red
        Else
            PictureBox147.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox119.BackColor = Color.Red
        Else
            PictureBox119.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox132.BackColor = Color.Red
        Else
            PictureBox132.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox114.BackColor = Color.Red
        Else
            PictureBox114.BackColor = Color.Gainsboro
        End If

        'Status0 LSB - addr 0
        Bits = Read_Buf(0)

        If (Bits And &H80) = &H80 Then
            PictureBox152.BackColor = Color.Red
        Else
            PictureBox152.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox153.BackColor = Color.Red
        Else
            PictureBox153.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox135.BackColor = Color.Red
        Else
            PictureBox135.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox123.BackColor = Color.Red
        Else
            PictureBox123.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox158.BackColor = Color.Red
        Else
            PictureBox158.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox129.BackColor = Color.Red
        Else
            PictureBox129.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox141.BackColor = Color.Red
        Else
            PictureBox141.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox117.BackColor = Color.Red
        Else
            PictureBox117.BackColor = Color.Gainsboro
        End If

        'Input Status1
        Write_Buf(0) = &H7
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(6).Cells(2).Value() = Temp_str

        'Status1 MSB - addr 3
        Bits = Read_Buf(1)

        If (Bits And &H80) = &H80 Then
            PictureBox160.BackColor = Color.Red
        Else
            PictureBox160.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox140.BackColor = Color.Red
        Else
            PictureBox140.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox128.BackColor = Color.Red
        Else
            PictureBox128.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox118.BackColor = Color.Red
        Else
            PictureBox118.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox151.BackColor = Color.Red
        Else
            PictureBox151.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox122.BackColor = Color.Red
        Else
            PictureBox122.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox134.BackColor = Color.Red
        Else
            PictureBox134.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox116.BackColor = Color.Red
        Else
            PictureBox116.BackColor = Color.Gainsboro
        End If

        'Status1 LSB - addr 2
        Bits = Read_Buf(0)

        If (Bits And &H80) = &H80 Then
            PictureBox148.BackColor = Color.Red
        Else
            PictureBox148.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox157.BackColor = Color.Red
        Else
            PictureBox157.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox137.BackColor = Color.Red
        Else
            PictureBox137.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox125.BackColor = Color.Red
        Else
            PictureBox125.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox154.BackColor = Color.Red
        Else
            PictureBox154.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox131.BackColor = Color.Red
        Else
            PictureBox131.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox145.BackColor = Color.Red
        Else
            PictureBox145.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox120.BackColor = Color.Red
        Else
            PictureBox120.BackColor = Color.Gainsboro
        End If

        'Debig1
        Write_Buf(0) = &H8
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(7).Cells(2).Value() = Temp_str
        DataGridView2.Rows(7).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'Debug2
        Write_Buf(0) = &H9
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(8).Cells(2).Value() = Temp_str
        DataGridView2.Rows(8).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'OUTLET_AMB_NTC_adc
        Write_Buf(0) = &HA
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView2.Rows(9).Cells(2).Value() = Temp_str
        DataGridView2.Rows(9).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper
       
    End Sub
   
#End Region
#End Region

#Region "Secondary Controls & Functions"
#Region "Controls"
   
   
#End Region
#Region "Functions"
    Private Sub Init_Sec_DGV(ByVal Null_Data As Byte)

        Dim Arr_Len As Byte = Secondary_Data_Struct.Length
        For Arr_Loc As Byte = 0 To Arr_Len - 1
            DataGridView3.Rows.Add(1)
            DataGridView3.Rows(Arr_Loc).Cells(0).Value() = Convert.ToString(Secondary_Data_Struct(Arr_Loc).Addr, 16).ToUpper
            DataGridView3.Rows(Arr_Loc).Cells(1).Value() = Secondary_Data_Struct(Arr_Loc).Reg_Name
        Next
    End Sub
    Private Sub Update_Sec_Status(ByVal Null_Data As Byte)

        Dim str As String
        Dim Temp_str As String = ""

        'SEC_V1_INT_ADC
        Write_Buf(0) = &H10
        Write_Byte(&HFA)
        Str = Read_Word(&HFA)

        Dim Word_Data As UInteger = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(0).Cells(2).Value() = Temp_str
        DataGridView3.Rows(0).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'SEC_V1_ext_ADC
        Write_Buf(0) = &H11
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(1).Cells(2).Value() = Temp_str
        DataGridView3.Rows(1).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'SEC_V1_I_ADC 
        Write_Buf(0) = &H12
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(2).Cells(2).Value() = Temp_str
        DataGridView3.Rows(2).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_I1_SHARE_ADC
        Write_Buf(0) = &H13
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(3).Cells(2).Value() = Temp_str
        DataGridView3.Rows(3).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_I1_LOCAL_ADC  
        Write_Buf(0) = &H14
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(4).Cells(2).Value() = Temp_str
        DataGridView3.Rows(4).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_VSB_INT_ADC 
        Write_Buf(0) = &H15
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(5).Cells(2).Value() = Temp_str
        DataGridView3.Rows(5).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_VSB_EXT_ADC   
        Write_Buf(0) = &H16
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(6).Cells(2).Value() = Temp_str
        DataGridView3.Rows(6).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_VSB_CURR_ADC   
        Write_Buf(0) = &H17
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(7).Cells(2).Value() = Temp_str
        DataGridView3.Rows(7).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_NTC_AMB_ADC    
        Write_Buf(0) = &H18
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(8).Cells(2).Value() = Temp_str
        DataGridView3.Rows(8).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_NTC_SR_ADC   
        Write_Buf(0) = &H19
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(9).Cells(2).Value() = Temp_str
        DataGridView3.Rows(9).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_NTC_AMB_TEMP   
        Write_Buf(0) = &H1A
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(10).Cells(2).Value() = Temp_str
        DataGridView3.Rows(10).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_NTC_SR_TEMP      
        Write_Buf(0) = &H1B
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(11).Cells(2).Value() = Temp_str
        DataGridView3.Rows(11).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_NTC_OUTLET_TEMP    
        Write_Buf(0) = &H1C
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(12).Cells(2).Value() = Temp_str
        DataGridView3.Rows(12).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_NTC_PFC_TEMP      
        Write_Buf(0) = &H1D
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(13).Cells(2).Value() = Temp_str
        DataGridView3.Rows(13).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_V1FaultFlag00      
        Write_Buf(0) = &H20
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(14).Cells(2).Value() = Temp_str
        DataGridView3.Rows(14).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper


        Dim Bits As Byte

        'Status0 MSB - addr 1
        Bits = Read_Buf(1)

        If (Bits And &H80) = &H80 Then
            PictureBox76.BackColor = Color.Red
        Else
            PictureBox76.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox88.BackColor = Color.Red
        Else
            PictureBox88.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox101.BackColor = Color.Red
        Else
            PictureBox101.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox112.BackColor = Color.Red
        Else
            PictureBox112.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox82.BackColor = Color.Red
        Else
            PictureBox82.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox108.BackColor = Color.Red
        Else
            PictureBox108.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox94.BackColor = Color.Red
        Else
            PictureBox94.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox113.BackColor = Color.Red
        Else
            PictureBox113.BackColor = Color.Gainsboro
        End If

        'Status0 LSB - addr 0
        Bits = Read_Buf(0)

        If (Bits And &H80) = &H80 Then
            PictureBox70.BackColor = Color.Red
        Else
            PictureBox70.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox79.BackColor = Color.Red
        Else
            PictureBox79.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox91.BackColor = Color.Red
        Else
            PictureBox91.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox104.BackColor = Color.Red
        Else
            PictureBox104.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox73.BackColor = Color.Red
        Else
            PictureBox73.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox97.BackColor = Color.Red
        Else
            PictureBox97.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox85.BackColor = Color.Red
        Else
            PictureBox85.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox110.BackColor = Color.Red
        Else
            PictureBox110.BackColor = Color.Gainsboro
        End If

        ' SEC_VsbFaltFlag00       
        Write_Buf(0) = &H21
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(15).Cells(2).Value() = Temp_str
        DataGridView3.Rows(15).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'Status1 MSB - addr 3
        Bits = Read_Buf(1)

        If (Bits And &H80) = &H80 Then
            PictureBox67.BackColor = Color.Red
        Else
            PictureBox67.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox75.BackColor = Color.Red
        Else
            PictureBox75.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox87.BackColor = Color.Red
        Else
            PictureBox87.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox100.BackColor = Color.Red
        Else
            PictureBox100.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox69.BackColor = Color.Red
        Else
            PictureBox69.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox93.BackColor = Color.Red
        Else
            PictureBox93.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox81.BackColor = Color.Red
        Else
            PictureBox81.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox106.BackColor = Color.Red
        Else
            PictureBox106.BackColor = Color.Gainsboro
        End If

        'Status1 LSB - addr 2
        Bits = Read_Buf(0)

        If (Bits And &H80) = &H80 Then
            PictureBox65.BackColor = Color.Red
        Else
            PictureBox65.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox72.BackColor = Color.Red
        Else
            PictureBox72.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox84.BackColor = Color.Red
        Else
            PictureBox84.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox96.BackColor = Color.Red
        Else
            PictureBox96.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox66.BackColor = Color.Red
        Else
            PictureBox66.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox90.BackColor = Color.Red
        Else
            PictureBox90.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox78.BackColor = Color.Red
        Else
            PictureBox78.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox103.BackColor = Color.Red
        Else
            PictureBox103.BackColor = Color.Gainsboro
        End If


        ' SEC_sSysStateFg00        
        Write_Buf(0) = &H22
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(16).Cells(2).Value() = Temp_str
        DataGridView3.Rows(16).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        Bits = Read_Buf(1)


         If (Bits And &H80) = &H80 Then
            PictureBox187.BackColor = Color.Red
        Else
            PictureBox187.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox192.BackColor = Color.Red
        Else
            PictureBox192.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox183.BackColor = Color.Red
        Else
            PictureBox183.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox179.BackColor = Color.Red
        Else
            PictureBox179.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox189.BackColor = Color.Red
        Else
            PictureBox189.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox181.BackColor = Color.Red
        Else
            PictureBox181.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox188.BackColor = Color.Red
        Else
            PictureBox188.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox177.BackColor = Color.Red
        Else
            PictureBox177.BackColor = Color.Gainsboro
        End If

        ' 

        Bits = Read_Buf(0)


        If (Bits And &H80) = &H80 Then
            PictureBox184.BackColor = Color.Red
        Else
            PictureBox184.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox191.BackColor = Color.Red
        Else
            PictureBox191.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox185.BackColor = Color.Red
        Else
            PictureBox185.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox180.BackColor = Color.Red
        Else
            PictureBox180.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox186.BackColor = Color.Red
        Else
            PictureBox186.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox182.BackColor = Color.Red
        Else
            PictureBox182.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox190.BackColor = Color.Red
        Else
            PictureBox190.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox178.BackColor = Color.Red
        Else
            PictureBox178.BackColor = Color.Gainsboro
        End If

        ' SEC_sSysStateFg01      
        Write_Buf(0) = &H23
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(17).Cells(2).Value() = Temp_str
        DataGridView3.Rows(17).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        Bits = Read_Buf(1)


        If (Bits And &H80) = &H80 Then
            PictureBox74.BackColor = Color.Red
        Else
            PictureBox74.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox86.BackColor = Color.Red
        Else
            PictureBox86.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox98.BackColor = Color.Red
        Else
            PictureBox98.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox109.BackColor = Color.Red
        Else
            PictureBox109.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox80.BackColor = Color.Red
        Else
            PictureBox80.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox105.BackColor = Color.Red
        Else
            PictureBox105.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox92.BackColor = Color.Red
        Else
            PictureBox92.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox111.BackColor = Color.Red
        Else
            PictureBox111.BackColor = Color.Gainsboro
        End If

        ' 

        Bits = Read_Buf(0)


        If (Bits And &H80) = &H80 Then
            PictureBox68.BackColor = Color.Red
        Else
            PictureBox68.BackColor = Color.Gainsboro
        End If

        If (Bits And &H40) = &H40 Then
            PictureBox77.BackColor = Color.Red
        Else
            PictureBox77.BackColor = Color.Gainsboro
        End If

        If (Bits And &H20) Then
            PictureBox89.BackColor = Color.Red
        Else
            PictureBox89.BackColor = Color.Gainsboro
        End If

        If (Bits And &H10) = &H10 Then
            PictureBox102.BackColor = Color.Red
        Else
            PictureBox102.BackColor = Color.Gainsboro
        End If

        If (Bits And &H8) = &H8 Then
            PictureBox71.BackColor = Color.Red
        Else
            PictureBox71.BackColor = Color.Gainsboro
        End If

        If (Bits And &H4) = &H4 Then
            PictureBox95.BackColor = Color.Red
        Else
            PictureBox95.BackColor = Color.Gainsboro
        End If

        If (Bits And &H2) = &H2 Then
            PictureBox83.BackColor = Color.Red
        Else
            PictureBox83.BackColor = Color.Gainsboro
        End If

        If (Bits And &H1) = &H1 Then
            PictureBox107.BackColor = Color.Red
        Else
            PictureBox107.BackColor = Color.Gainsboro
        End If
        
        
        
        
        ' SEC_VoutFlag       
        Write_Buf(0) = &H24
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(18).Cells(2).Value() = Temp_str
        DataGridView3.Rows(18).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_uTempOtw       
        Write_Buf(0) = &H25
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(19).Cells(2).Value() = Temp_str
        DataGridView3.Rows(19).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_uTempOtp        
        Write_Buf(0) = &H26
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(20).Cells(2).Value() = Temp_str
        DataGridView3.Rows(20).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SSEC_DioOutStatus         
        Write_Buf(0) = &H27
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(21).Cells(2).Value() = Temp_str
        DataGridView3.Rows(21).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        ' SEC_LatchFault           
        Write_Buf(0) = &H28
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(22).Cells(2).Value() = Temp_str
        DataGridView3.Rows(22).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'SEC_TempState      
        Write_Buf(0) = &H29
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(23).Cells(2).Value() = Temp_str
        DataGridView3.Rows(23).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'SEC_DEBUG_1       
        Write_Buf(0) = &H3C
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(24).Cells(2).Value() = Temp_str
        DataGridView3.Rows(24).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'SEC_DEBUG_2       
        Write_Buf(0) = &H3D
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(25).Cells(2).Value() = Temp_str
        DataGridView3.Rows(25).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'SEC_DEBUG_3       
        Write_Buf(0) = &H3E
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(26).Cells(2).Value() = Temp_str
        DataGridView3.Rows(26).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper

        'SEC_DEBUG_4       
        Write_Buf(0) = &H3F
        Write_Byte(&HFA)
        str = Read_Word(&HFA)

        Word_Data = Read_Buf(0) + (256 * Read_Buf(1))
        Temp_str = Convert.ToString(Word_Data, 16).ToUpper
        If Temp_str.Length = 1 Then
            Temp_str = "000" & Temp_str
        ElseIf Temp_str.Length = 2 Then
            Temp_str = "00" & Temp_str
        ElseIf Temp_str.Length = 3 Then
            Temp_str = "0" & Temp_str
        End If
        DataGridView3.Rows(27).Cells(2).Value() = Temp_str
        DataGridView3.Rows(27).Cells(3).Value() = Convert.ToString(Word_Data, 10).ToUpper


    End Sub
  
#End Region
#End Region

#Region "EEPROM Controls & Functions"
#Region "Controls"
    Private Sub Button28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button28.Click
        Fill_EEP_DGV(0)
    End Sub
    Private Sub Button93_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button93.Click
        If TextBox24.TextLength = 11 Then
            Dim array() As Byte = System.Text.Encoding.ASCII.GetBytes(TextBox24.Text)
            For i As Byte = 0 To 10
                EEPROM(15).Data(i) = array(i)
            Next
            ' EEPROM(15).Data(11) = 0
            Eep_CS = 0
            Update_EEP_Data(0)
        End If
    End Sub
    Private Sub Button27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button27.Click
        If EEP_RW_Flag = 0 Then
            EEP_RW_Flag = 1 ' For Read
            EEP_Rd_Addr_Pntr = 0
        End If
    End Sub
    Private Sub Button94_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button94.Click
        'Update EEPROM Wr Data to Wr Array
        Dim arr_pntr As UInt16 = 0
        For Arr_Loc As Integer = 0 To (EEPROM.Length - 1)
            If Not Arr_Loc = 94 Then
                For dt_cnt As Byte = 1 To EEPROM(Arr_Loc).Length
                    EEP_Wr_Data(arr_pntr) = EEPROM(Arr_Loc).Data(dt_cnt - 1)
                    arr_pntr += 1
                Next
            Else
                For dt_cnt As Byte = 1 To EEPROM(Arr_Loc).Length
                    EEP_Wr_Data(arr_pntr) = &HFF
                    arr_pntr += 1
                Next
            End If
        Next
        'Start Writing
        If EEP_RW_Flag = 0 Then
            EEP_RW_Flag = 2
            EEP_Wr_Addr_Pntr = 0
        End If
    End Sub
#End Region
#Region "Functions"
    Private Sub Init_EEP(ByVal Null_Data As Byte)
        'EEPROM Table
        DataGridView11.Rows.Add(16)
        DataGridView11.Rows.Item(0).HeaderCell.Value = "00"
        DataGridView11.Rows.Item(1).HeaderCell.Value = "10"
        DataGridView11.Rows.Item(2).HeaderCell.Value = "20"
        DataGridView11.Rows.Item(3).HeaderCell.Value = "30"
        DataGridView11.Rows.Item(4).HeaderCell.Value = "40"
        DataGridView11.Rows.Item(5).HeaderCell.Value = "50"
        DataGridView11.Rows.Item(6).HeaderCell.Value = "60"
        DataGridView11.Rows.Item(7).HeaderCell.Value = "70"
        DataGridView11.Rows.Item(8).HeaderCell.Value = "80"
        DataGridView11.Rows.Item(9).HeaderCell.Value = "90"
        DataGridView11.Rows.Item(10).HeaderCell.Value = "A0"
        DataGridView11.Rows.Item(11).HeaderCell.Value = "B0"
        DataGridView11.Rows.Item(12).HeaderCell.Value = "C0"
        DataGridView11.Rows.Item(13).HeaderCell.Value = "D0"
        DataGridView11.Rows.Item(14).HeaderCell.Value = "E0"
        DataGridView11.Rows.Item(15).HeaderCell.Value = "F0"

        Fill_EEP_DGV(0)
        DataGridView13.Rows.Add(EEPROM.Length)
        Update_EEP_Data(0)
    End Sub
    Private Sub Fill_EEP_DGV(ByVal Null_Data As Byte)
        Dim row As Byte = 0
        Dim Col As Byte = 0
        For i As UInteger = 0 To 255
            DataGridView11.Rows(row).Cells(Col).Value() = "FF"
            DataGridView11.Rows(row).Cells(Col + 17).Value() = "-"
            Col += 1
            If Col = 16 Then
                Col = 0
                row += 1
            End If
        Next
    End Sub
    Private Sub Button21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button21.Click
        'Update All EEPROM Wr Data to FF
        Dim arr_pntr As UInt16 = 0
        For arr_pntr = 0 To &HFF
            EEP_Wr_Data(arr_pntr) = &HFF
        Next

        'Start Writing
        If EEP_RW_Flag = 0 Then
            EEP_RW_Flag = 2
            EEP_Wr_Addr_Pntr = 0
            Write_FF = True
        End If
    End Sub

    Private Sub Update_EEP_Data(ByVal Null_Data As Byte)

        'EEPROM Data
        Dim Arr_Len As Byte = EEPROM.Length
        Dim Zero_CS As UInteger = 0
        Dim Start As Integer = 0
        Dim Field_data_cksm As UInteger = 0
        EEP_Rd_Addr_Pntr = 0

        For Arr_Loc As Integer = 0 To Arr_Len - 1
            Dim str As String = ""
            str = Convert.ToString(EEPROM(Arr_Loc).Start_Addr + Start, 16).ToUpper

            If str.Length = 1 Then
                str = "0" & str
            End If
            DataGridView13.Rows(Arr_Loc).Cells(0).Value() = str
            DataGridView13.Rows(Arr_Loc).Cells(1).Value() = Convert.ToString(EEPROM(Arr_Loc).Length, 10)
            str = EEPROM(Arr_Loc).Descrip
            If EEPROM(Arr_Loc).Variable = True Then
                str = str & " *"
            End If
            DataGridView13.Rows(Arr_Loc).Cells(2).Value() = str
            str = ""
            Start = Start + EEPROM(Arr_Loc).Length - 1
            If Not Arr_Loc = 58 Then

                For dt_cnt As Byte = 1 To EEPROM(Arr_Loc).Length

                    If Arr_Loc = 0 Or Arr_Loc = 1 Or Arr_Loc = 3 Or Arr_Loc = 5 Or Arr_Loc = 8 Or Arr_Loc = 10 Or Arr_Loc = 12 Or Arr_Loc = 15 Or Arr_Loc = 17 Then
                        Field_data_cksm = Field_data_cksm + EEPROM(Arr_Loc).Data(dt_cnt - 1)
                    ElseIf Arr_Loc = 19 Or Arr_Loc = 21 Or Arr_Loc = 24 Or Arr_Loc = 27 Or Arr_Loc = 30 Or Arr_Loc = 32 Or Arr_Loc = 34 Or Arr_Loc = 38 Or Arr_Loc = 42 Or Arr_Loc = 45 Then
                        Field_data_cksm = Field_data_cksm + EEPROM(Arr_Loc).Data(dt_cnt - 1)
                    End If

                    If Arr_Loc = 39 Then
                        Field_data_cksm = Field_data_cksm Mod 256
                        EEPROM(Arr_Loc).Data(1) = 256 - Field_data_cksm
                    End If

                    If Arr_Loc < 48 Then
                        Eep_CS = Eep_CS + EEPROM(Arr_Loc).Data(dt_cnt - 1)
                    ElseIf Arr_Loc = 48 Then
                        Eep_CS = Eep_CS Mod 256
                        EEPROM(Arr_Loc).Data(1) = 256 - Eep_CS
                    End If

                    Dim t As String = Convert.ToString(EEPROM(Arr_Loc).Data(dt_cnt - 1), 16).ToUpper
                    If t.Length = 1 Then
                        t = "0" & t
                    End If
                    str = str & " " & t

                    EEP_Rd_Data(EEP_Rd_Addr_Pntr) = EEPROM(Arr_Loc).Data(dt_cnt - 1)
                    EEP_Rd_Addr_Pntr += 1
                Next
            Else
                str = "FF" & ".." & "FF"
                For dt_cnt As Byte = 1 To EEPROM(Arr_Loc).Length
                    EEP_Rd_Data(EEP_Rd_Addr_Pntr) = &HFF
                    EEP_Rd_Addr_Pntr += 1
                Next
            End If

            DataGridView13.Rows(Arr_Loc).Cells(3).Value() = str
            If EEPROM(Arr_Loc).Ascii = True Then
                DataGridView13.Rows(Arr_Loc).Cells(4).Value() = System.Text.ASCIIEncoding.ASCII.GetString(EEPROM(Arr_Loc).Data)
            End If
        Next

        For j As Byte = 0 To 15
            For i As Byte = 0 To 15
                Dim Str As String = Convert.ToString(EEP_Rd_Data((j * 16) + i), 16).ToUpper
                If Str.Length = 1 Then
                    Str = "0" & Str
                End If
                DataGridView11.Rows(j).Cells(i).Value() = Str
                If EEP_Rd_Data((j * 16) + i) > 31 And EEP_Rd_Data((j * 16) + i) < 127 Then
                    Dim byte_Arr() As Byte = {0}
                    byte_Arr(0) = EEP_Rd_Data((j * 16) + i)
                    Dim value As String = System.Text.ASCIIEncoding.ASCII.GetString(byte_Arr)
                    DataGridView11.Rows(j).Cells(i + 17).Value() = value
                Else
                    DataGridView11.Rows(j).Cells(i + 17).Value() = "-"
                End If
            Next
        Next
    End Sub
#End Region
#End Region

#Region "Fault History Controls & Functions"
#Region "Controls"


#End Region
#Region "Functions"
    Private Sub Init_Fault_History(ByVal Null_Data As Byte)
        'Fault history Table

        '    DataGridView5.Rows.Item(0).HeaderCell.Value() = Convert.ToString(i, 16).ToUpper
        'Next 

    End Sub
#End Region
#End Region

#Region "Bootloader Controls & Functions"

#Region "Controls"
   
  
   
#End Region

#Region "Functions"
    Function CRC16(ByVal data() As Byte, ByVal Start_Ar As UInteger, ByVal Array_Size As UInteger)
        Dim CRC16Lo As Byte, CRC16Hi As Byte 'CRC register
        Dim CL As Byte, CH As Byte 'Polynomial codes & HA001
        Dim SaveHi As Byte, SaveLo As Byte
        Dim i As UInteger
        Dim Flag As UInteger
        Dim Arr_siz As UInteger = Start_Ar + Array_Size

        CRC16Lo = &H0
        CRC16Hi = &H0
        CL = &H1
        CH = &HA0

        For i = Start_Ar To (Arr_siz - 1)
            CRC16Lo = CRC16Lo Xor data(i)                       'for each data and CRC register XOR
            For Flag = 0 To 7
                SaveHi = CRC16Hi
                SaveLo = CRC16Lo
                CRC16Hi = CRC16Hi \ 2                           'peak shift to the right one
                CRC16Lo = CRC16Lo \ 2                           'shift to the right a low

                If ((SaveHi And &H1) = &H1) Then              'If the high byte last one for a
                    CRC16Lo = CRC16Lo Or &H80 'then the low byte shifted to the right after the meeting in front of a
                End If 'Otherwise, auto-fill 0

                If ((SaveLo And &H1) = &H1) Then 'If the LSB is 1, then XOR with the polynomial codes
                    CRC16Hi = CRC16Hi Xor CH
                    CRC16Lo = CRC16Lo Xor CL
                End If
            Next Flag
        Next i

        i = (CRC16Hi * 256) + CRC16Lo
        Return i
    End Function

#End Region

#End Region

#Region "Timer Interrupts"
    Private Sub Timer1_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Timer1.Tick
        Dim Return_Str As String = "0000"
        Dim time As DateTime = DateTime.Now
        Dim format As String = "d MMM yyyy HH:mm:ss"
        If Capture_Data = True Then
            Capture_Data_Delay += 1
        End If
        If Hardware_Detected = 1 Then
            If Win_I2C_Error = True And Hardware_Selection = 1 Then
                Err_Rec_Count += 1
                If Err_Rec_Count > 200 Then ' Delay .5 Sec
                    Win_I2C_Error = False
                    Append_Text1("WIN I2C Hardware Re-Configured for I2C" & vbCrLf)
                    Enable_I2C()
                    Append_Text1("I2C Module Enabled as Master" & vbCrLf)
                    Dim Freq As Integer = GetI2CFrequency()
                    Append_Text1("I2C Frequency Set as " & Convert.ToString(Freq, 10) & " Khz" & vbCrLf)
                    Dim FW_Rev As Byte = GetFirmwareRevision()
                    Append_Text1("Firmware Revision: " & Convert.ToString(FW_Rev, 10) & vbCrLf)
                    Dim Dll_Ver As Long = Get_DLL_Version()
                    Append_Text1("DLL Version: " & Convert.ToString(Dll_Ver, 10) & vbCrLf)
                    Err_Rec_Count = 0
                    RichTextBox1.BackColor = Color.White

                    Read_Pri_Flag = False
                ElseIf Err_Rec_Count = 1 Then
                    RichTextBox1.BackColor = Color.Khaki
                    Disable_I2C()
                End If
            ElseIf Pic_Kit_Error = True And Hardware_Selection = 2 Then
                Err_Rec_Count += 1
                If Err_Rec_Count > 200 Then ' Delay 0.5 Sec
                    Pic_Kit_Error = False
                    '   Init_PKSA(0)
                    PICkitS.Device.Reset_Control_Block()
                    PICkitS.Device.Reset_Control_Block()
                    PICkitS.Device.Reset_Control_Block()
                    Append_Text1("Pickit Control Block Resetted" & vbCrLf)
                    Err_Rec_Count = 0
                    RichTextBox1.BackColor = Color.White
                    'Reset all status after Pickit Reset

                    Read_Pri_Flag = False
                ElseIf Err_Rec_Count = 1 Then
                    RichTextBox1.BackColor = Color.Khaki
                End If
            ElseIf Capture_Data = True And Capture_Data_Delay > 500 Then  'Read Every 10 Second
                Capture_Data_Delay = 0
                Dim T_Str As String = "'" & time.ToString(format)
                Dim str As String = ""

                str = Read_Linear_Word_Pmb(&H8D, 13)
                T_Str = T_Str & "," & Pmb_Act_Data
                str = Read_Linear_Word_Pmb(&H8F, 14)
                T_Str = T_Str & "," & Pmb_Act_Data
                str = Read_Linear_Word_Pmb(&H8E, 15)
                T_Str = T_Str & "," & Pmb_Act_Data
                str = Read_Linear_Word_Pmb(&H90, 16)
                T_Str = T_Str & "," & Pmb_Act_Data

                Data_Str(Data_Arr_Pntr) = T_Str

                Data_Arr_Pntr += 1
                Capture_Data_Pntr += 1

                If Data_Arr_Pntr >= 60 Then 'Every 1 min - 60 Captures
                    Update_Log_to_file(0)
                End If

                If Capture_Data_Pntr >= 360 Then
                    Capture_Data = False
                    Button15.BackColor = Color.Transparent
                End If
            ElseIf Not EEP_RW_Flag = 0 Then
                EEP_Delay += 1
                If EEP_RW_Flag = 1 Then 'Read
                    If EEP_Delay > 5 Then
                        Dim EEP_Addr As Byte = EEP_Rd_Addr_Pntr * 16
                        Eep_Dev_Addr = NumericUpDown4.Value
                        If Hardware_Selection = 1 Then      'Win I2C
                            Dim Read_Sta As Byte = I2CReadArray(Eep_Dev_Addr, EEP_Addr, 16, EEP_Rd_Data(0))
                            If Read_Sta = 0 Then
                                Append_Text1("Reading Data from EEPROM  sucessful at Addtress " & Convert.ToString(EEP_Addr, 16).ToUpper & vbCrLf)
                            Else
                                Append_Text1("Error Reading EEPROM Data from the device at Addtress " & Convert.ToString(EEP_Addr, 16).ToUpper & vbCrLf)
                                Win_I2C_Error = True
                            End If
                        ElseIf Hardware_Selection = 2 Then  'PICKit
                            If (PICkitS.I2CM.Read(Eep_Dev_Addr, 0, EEP_Addr, 16, EEP_Rd_Data, Return_Str)) Then
                                Append_Text1("Reading Data from EEPROM  sucessful at Addtress " & Convert.ToString(EEP_Addr, 16).ToUpper & vbCrLf)
                            Else
                                Append_Text1("Error Reading EEPROM Data from the device at Addtress " & Convert.ToString(EEP_Addr, 16).ToUpper & vbCrLf)
                                Pic_Kit_Error = True
                                EEP_RW_Flag = 0
                            End If
                        End If

                        For i As Byte = 0 To 15
                            Dim Str As String = Convert.ToString(EEP_Rd_Data(i), 16).ToUpper
                            If Str.Length = 1 Then
                                Str = "0" & Str
                            End If
                            DataGridView11.Rows(EEP_Rd_Addr_Pntr).Cells(i).Value() = Str
                            If EEP_Rd_Data(i) > 31 And EEP_Rd_Data(i) < 127 Then
                                Dim byte_Arr() As Byte = {0}
                                byte_Arr(0) = EEP_Rd_Data(i)
                                Dim value As String = System.Text.ASCIIEncoding.ASCII.GetString(byte_Arr)
                                DataGridView11.Rows(EEP_Rd_Addr_Pntr).Cells(i + 17).Value() = value
                            Else
                                DataGridView11.Rows(EEP_Rd_Addr_Pntr).Cells(i + 17).Value() = "-"
                            End If
                        Next

                        EEP_Delay = 0
                        EEP_Rd_Addr_Pntr += 1
                        If EEP_Rd_Addr_Pntr > 15 Then
                            EEP_RW_Flag = 0
                        End If
                    End If
                ElseIf EEP_RW_Flag = 2 Then ' Write
                    If EEP_Delay > 5 Then
                        If Write_FF = True Then
                            Dim arr(2) As Byte
                            arr(0) = EEP_Wr_Addr_Pntr
                            arr(1) = &HFF
                            Eep_Dev_Addr = NumericUpDown4.Value

                            If Hardware_Selection = 1 Then      'Win I2C
                                Dim Write_Sta As Byte = I2CWriteArray(Eep_Dev_Addr, 0, 2, arr(0))
                                If Write_Sta = 0 Then
                                    Append_Text1("Writing EEPROM Data sucessful at Addtress " & Convert.ToString(EEP_Wr_Addr_Pntr, 16).ToUpper & vbCrLf)
                                Else
                                    Append_Text1("Error Writing EEPROM Data to device at Addtress " & Convert.ToString(EEP_Wr_Addr_Pntr, 16).ToUpper & vbCrLf)
                                    Win_I2C_Error = True
                                End If
                            ElseIf Hardware_Selection = 2 Then  'PICKit
                                If (PICkitS.I2CM.Write(Eep_Dev_Addr, 0, 2, arr, Return_Str)) Then
                                    Append_Text1("Writing EEPROM Data sucessful at Addtress " & Convert.ToString(EEP_Wr_Addr_Pntr, 16).ToUpper & vbCrLf)
                                Else
                                    Append_Text1("Error Writing EEPROM Data to device at Addtress " & Convert.ToString(EEP_Wr_Addr_Pntr, 16).ToUpper & vbCrLf)
                                    Pic_Kit_Error = True
                                    EEP_RW_Flag = 0
                                End If
                            End If

                            EEP_Delay = 0
                            EEP_Wr_Addr_Pntr += 1
                            If EEP_Wr_Addr_Pntr > &HFF Then
                                EEP_RW_Flag = 0
                                Write_FF = False
                            End If
                        Else
                            Dim arr(2) As Byte
                            arr(0) = EEP_Wr_Addr_Pntr
                            arr(1) = EEP_Wr_Data(EEP_Wr_Addr_Pntr)
                            Eep_Dev_Addr = NumericUpDown4.Value

                            If Hardware_Selection = 1 Then      'Win I2C
                                Dim Write_Sta As Byte = I2CWriteArray(Eep_Dev_Addr, 0, 2, arr(0))
                                If Write_Sta = 0 Then
                                    Append_Text1("Writing EEPROM Data sucessful at Addtress " & Convert.ToString(EEP_Wr_Addr_Pntr, 16).ToUpper & vbCrLf)
                                Else
                                    Append_Text1("Error Writing EEPROM Data to device at Addtress " & Convert.ToString(EEP_Wr_Addr_Pntr, 16).ToUpper & vbCrLf)
                                    Win_I2C_Error = True
                                End If
                            ElseIf Hardware_Selection = 2 Then  'PICKit
                                If (PICkitS.I2CM.Write(Eep_Dev_Addr, 0, 2, arr, Return_Str)) Then
                                    Append_Text1("Writing EEPROM Data sucessful at Addtress " & Convert.ToString(EEP_Wr_Addr_Pntr, 16).ToUpper & vbCrLf)
                                Else
                                    Append_Text1("Error Writing EEPROM Data to device at Addtress " & Convert.ToString(EEP_Wr_Addr_Pntr, 16).ToUpper & vbCrLf)
                                    Pic_Kit_Error = True
                                    EEP_RW_Flag = 0
                                End If
                            End If

                            EEP_Delay = 0
                            EEP_Wr_Addr_Pntr += 1

                            If EEP_Wr_Addr_Pntr > &HFF Then
                                EEP_RW_Flag = 0
                            End If
                        End If
                    End If
                End If
            ElseIf BL_W2R_Flag = True Then

            ElseIf Not Auto_Update_Sta = 0 Then

            ElseIf Process_File_Flag = True Then
               
            ElseIf Read_Pri_Sta = True Then
                
            ElseIf Read_Pri_Flag = True Then
          
            ElseIf Not Pri_Cal_Sta = 0 Then

            ElseIf Not Pri_Save_Sta = 0 Then

            ElseIf Query = True Then
                Query_Delay += 1
                If Query_Delay > 5 Then
                    Read_Byte(&H1A)
                    Query = False
                    If Read_Buf(0) = 0 Then
                        TextBox64.Text = "NO"
                        TextBox56.Text = "NO"
                        TextBox63.Text = "NO"
                        TextBox64.BackColor = Color.Red
                        TextBox56.BackColor = Color.Red
                        TextBox63.BackColor = Color.Red
                        TextBox121.Text = ""
                    Else
                        If (Read_Buf(0) And &H80) = &H80 Then
                            TextBox64.Text = "YES"
                            TextBox64.BackColor = Color.Green
                        Else
                            TextBox64.Text = "NO"
                            TextBox64.BackColor = Color.Red
                        End If

                        If (Read_Buf(0) And &H40) = &H40 Then
                            TextBox56.Text = "YES"
                            TextBox56.BackColor = Color.Green
                        Else
                            TextBox56.Text = "NO"
                            TextBox56.BackColor = Color.Red
                        End If

                        If (Read_Buf(0) And &H20) = &H20 Then
                            TextBox63.Text = "YES"
                            TextBox63.BackColor = Color.Green
                        Else
                            TextBox63.Text = "NO"
                            TextBox63.BackColor = Color.Red
                        End If
                         
                        TextBox121.Text = Read_Buf(0)

                        If ((Read_Buf(0) And &H10) = &H10) And ((Read_Buf(0) And &H8) = &H8) And ((Read_Buf(0) And &H4) = &H4) Then
                            Label398.Text = "Command does not return numeric data"
                        ElseIf ((Read_Buf(0) And &H10) = &H10) And ((Read_Buf(0) And &H8) = &H8) And (Not ((Read_Buf(0) And &H4) = &H4)) Then
                            Label398.Text = "Manufacturer specific format used"
                        ElseIf (((Read_Buf(0) And &H10) = &H10)) And (Not ((Read_Buf(0) And &H8) = &H8)) And (((Read_Buf(0) And &H4) = &H4)) Then
                            Label398.Text = "VID Mode Format used"
                        ElseIf (((Read_Buf(0) And &H10) = &H10)) And (Not ((Read_Buf(0) And &H8) = &H8)) And (Not ((Read_Buf(0) And &H4) = &H4)) Then
                            Label398.Text = "8 bit unsigned number"
                        ElseIf (Not ((Read_Buf(0) And &H10) = &H10)) And (((Read_Buf(0) And &H8) = &H8)) And (((Read_Buf(0) And &H4) = &H4)) Then
                            Label398.Text = "Direct Mode Format used"
                        ElseIf (Not ((Read_Buf(0) And &H10) = &H10)) And (((Read_Buf(0) And &H8) = &H8)) And (Not ((Read_Buf(0) And &H4) = &H4)) Then
                            Label398.Text = "Reserved"
                        ElseIf (Not ((Read_Buf(0) And &H10) = &H10)) And (Not ((Read_Buf(0) And &H8) = &H8)) And (((Read_Buf(0) And &H4) = &H4)) Then
                            Label398.Text = "16 bit signed number"
                        ElseIf (Not ((Read_Buf(0) And &H10) = &H10)) And (Not ((Read_Buf(0) And &H8) = &H8)) And (Not ((Read_Buf(0) And &H4) = &H4)) Then
                            Label398.Text = "Linear Data Format used"
                        End If
                    End If
                End If
            Else
                Err_Rec_Count = 0
                If Poll_Button_Latched = True Then
                    Poll_Dly_Count += 1
                    Dim Poll_Delay As Byte = NumericUpDown7.Value / 10  ' 10mS delay
                    If Poll_Dly_Count >= Poll_Delay Then
                        Read_All(0)
                        Poll_Dly_Count = 0
                    End If
                End If

                If CaliSendDataDoneFlag Then
                    ReadCaliDataBackCnt += 1
                    If ReadCaliDataBackCnt >= 5 Then
                        Read_Cal_Data1(CaliMode, CaliLineIndex, CaliAmp, CaliOfs, CaliThr)
                        CaliSendDataDoneFlag = False
                        ReadCaliDataBackCnt = 0
                    End If
                End If

            End If
        End If
    End Sub
    Private Sub Timer2_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Timer2.Tick
        Dim Win_I2C_Count As UShort
        Dim PKSA_Count As UShort
        '  For Hardware detection 
        If Hardware_Detected = 0 Then ' Hardware not detcted yet
            Win_I2C_Count = GetNumberOfDevices()
            PKSA_Count = PICkitS.Device.How_Many_PICkitSerials_Are_Attached()
            If Win_I2C_Count >= 1 And (Hardware_Selection = 0 Or Hardware_Selection = 1) Then
                If Win_I2C_Count = 1 Then
                    Hardware_Detected = 1
                    Hardware_Selection = 1
                    ToolStripStatusLabel1.Text = "WIN-I2C Hardware Detected"
                    ToolStripStatusLabel1.BackColor = Color.YellowGreen
                    TabControl1.Enabled = True
                    Button2.Enabled = True
                    Button3.Enabled = True
                    Button14.Enabled = False
                    Append_Text1("WIN I2C Hardware Connected & Configured for I2C" & vbCrLf)
                    Win_I2C_Count = Enable_I2C()
                    Append_Text1("I2C Module Enabled as Master" & vbCrLf)
                    Dim Freq As Integer = GetI2CFrequency()
                    Append_Text1("I2C Frequency Set as " & Convert.ToString(Freq, 10) & " Khz" & vbCrLf)
                    Dim FW_Rev As Byte = GetFirmwareRevision()
                    Append_Text1("Firmware Revision: " & Convert.ToString(FW_Rev, 10) & vbCrLf)
                    Dim Dll_Ver As Long = Get_DLL_Version()
                    Append_Text1("DLL Version: " & Convert.ToString(Dll_Ver, 10) & vbCrLf)
                Else
                    ToolStripStatusLabel1.Text = " Invalid Hardware Config."
                    ToolStripStatusLabel1.BackColor = Color.Red
                    TabControl1.Enabled = False
                    Button2.Enabled = False
                    Button3.Enabled = False
                    Append_Text1("Multiple WIN I2C Hardwares Connected to the Host" & vbCrLf)
                End If
            ElseIf PKSA_Count = 1 And (Hardware_Selection = 0 Or Hardware_Selection = 2) Then
                If Init_PKSA(0) = True Then
                    Hardware_Detected = 1
                    Hardware_Selection = 2
                    RadioButton16.Enabled = False
                    ToolStripStatusLabel1.Text = " PKSA Hardware Detected"
                    ToolStripStatusLabel1.BackColor = Color.YellowGreen
                    TabControl1.Enabled = True
                    Button14.Enabled = True
                    Button2.Enabled = True
                    Button3.Enabled = True
                Else
                    ToolStripStatusLabel1.Text = " PKSA Hardware Not Detected"
                    ToolStripStatusLabel1.BackColor = Color.Red
                    TabControl1.Enabled = False
                    Button14.Enabled = False
                    Button2.Enabled = False
                    Button3.Enabled = False
                End If
            Else
                ToolStripStatusLabel1.Text = "Hardware Not Detected"
                ToolStripStatusLabel1.BackColor = Color.Red
                TabControl1.Enabled = False
                Button2.Enabled = False
                Button3.Enabled = False
            End If
        ElseIf Hardware_Detected = 1 Then
            If Hardware_Selection = 1 And (Poll_Button_Latched = False Or Win_I2C_Error = False) Then
                Win_I2C_Count = GetNumberOfDevices()
                If Win_I2C_Count = 0 Then
                    Hardware_Detected = 0
                    ToolStripStatusLabel1.Text = "WIN-I2C Hardware Not Detected"
                    ToolStripStatusLabel1.BackColor = Color.Red
                    TabControl1.Enabled = False
                    Button2.Enabled = False
                    Button3.Enabled = False
                    Poll_Button_Latched = False
                    Button2.BackColor = Color.Transparent
                    Append_Text1("WIN I2C Hardware Disconnected from Host" & vbCrLf)
                End If
            ElseIf Hardware_Selection = 2 And (Poll_Button_Latched = False Or Pic_Kit_Error = False) Then
                PKSA_Count = PICkitS.Device.How_Many_PICkitSerials_Are_Attached()
                If PKSA_Count = 0 Then
                    Hardware_Detected = 0
                    ToolStripStatusLabel1.Text = " PKSA Hardware Not Connected"
                    ToolStripStatusLabel1.BackColor = Color.Red
                    TabControl1.Enabled = False
                    Button14.Enabled = False
                    Button2.Enabled = False
                    Button3.Enabled = False
                    Poll_Button_Latched = False
                    Button2.BackColor = Color.Transparent
                End If
            End If
        End If
    End Sub
#End Region 

   
    Private Sub Button79_Click(sender As System.Object, e As System.EventArgs) Handles Button79.Click
        Dim Val As UInteger = TextBox78.Text
        Write_Buf(0) = Val Mod 256
        Write_Buf(1) = Val \ 256
        Write_Word(&HC5)
    End Sub

    Private Sub Button80_Click(sender As System.Object, e As System.EventArgs) Handles Button80.Click
        Dim str As String = Read_Word(&HC5)
        TextBox733.Text = Read_Buf(1) * 256 + Read_Buf(0) 'Pmb_Hex_Data
    End Sub

    Private Sub Button65_Click(sender As System.Object, e As System.EventArgs) Handles Button65.Click
        Dim Val As UInteger = TextBox76.Text
        Write_Buf(0) = Val Mod 256
        Write_Buf(1) = Val \ 256
        Write_Word(&HC7)
    End Sub

    Private Sub Button66_Click(sender As System.Object, e As System.EventArgs) Handles Button66.Click
        Dim str As String = Read_Word(&HC7)
        TextBox67.Text = Read_Buf(1) * 256 + Read_Buf(0) 'Pmb_Hex_Data
    End Sub

    Private Sub Button76_Click(sender As System.Object, e As System.EventArgs) Handles Button76.Click
        Dim Val As UInteger = TextBox82.Text
        Write_Buf(0) = Val Mod 256
        Write_Buf(1) = Val \ 256
        Write_Word(&HC6)
    End Sub

    Private Sub Button77_Click(sender As System.Object, e As System.EventArgs) Handles Button77.Click
        Dim str As String = Read_Word(&HC6)
        TextBox734.Text = Read_Buf(1) * 256 + Read_Buf(0) 'Pmb_Hex_Data
    End Sub

    Private Sub Button70_Click(sender As System.Object, e As System.EventArgs) Handles Button70.Click
        Dim Val As UInteger = TextBox85.Text
        Write_Buf(0) = Val Mod 256
        Write_Buf(1) = Val \ 256
        Write_Word(&HC3)
    End Sub

    Private Sub Button73_Click(sender As System.Object, e As System.EventArgs) Handles Button73.Click
        Dim str As String = Read_Word(&HC3)
        TextBox735.Text = Read_Buf(1) * 256 + Read_Buf(0) 'Pmb_Hex_Data
    End Sub

    Private Sub Button74_Click(sender As System.Object, e As System.EventArgs) Handles Button74.Click
        Dim Val As UInteger = TextBox77.Text
        Write_Buf(0) = Val Mod 256
        Write_Buf(1) = Val \ 256
        Write_Word(&HC8)
    End Sub

    Private Sub Button75_Click(sender As System.Object, e As System.EventArgs) Handles Button75.Click
        Dim str As String = Read_Word(&HC8)
        TextBox737.Text = Read_Buf(1) * 256 + Read_Buf(0) 'Pmb_Hex_Data
    End Sub

    Private Sub Button112_Click(sender As System.Object, e As System.EventArgs) Handles Button112.Click
        Dim Val As UInteger = TextBox739.Text
        Write_Buf(0) = Val Mod 256
        Write_Buf(1) = Val \ 256
        Write_Word(&HC2)
    End Sub

    Private Sub Button67_Click(sender As System.Object, e As System.EventArgs) Handles Button67.Click
        Dim Val As UInteger = TextBox86.Text
        Write_Buf(0) = Val Mod 256
        Write_Buf(1) = Val \ 256
        Write_Word(&HC4)
    End Sub

    Private Sub Button69_Click(sender As System.Object, e As System.EventArgs) Handles Button69.Click
        Dim str As String = Read_Word(&HC4)
        TextBox738.Text = Read_Buf(1) * 256 + Read_Buf(0) 'Pmb_Hex_Data
    End Sub

    Private Sub Button111_Click(sender As Object, e As EventArgs) Handles Button111.Click
        'Set Default Calibration
        Write_Buf(0) = &H8
        Write_Buf(1) = &HFE
        Write_Buf(2) = &H0
        Write_Buf(3) = &H0
        Write_Buf(4) = &H0
        Write_Buf(5) = &H0
        Write_Buf(6) = &H0
        Write_Buf(7) = &H0
        Write_Buf(8) = &H0
        Write_Block_1(&HC9)

    End Sub

    Private Sub CaliSelectModeComboBox_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles CaliSelectModeComboBox.SelectedIndexChanged
        CaliLabel1.Text = ""
        CaliLabel2.Text = ""
        CaliLabel3.Text = ""
        CaliConditionLabel1.Text = ""
        CaliConditionLabel2.Text = ""
        CaliConditionLabel3.Text = ""
        CaliConditionLabel4.Text = ""
        CaliConditionLabel5.Text = ""

        If CaliSelectModeComboBox.Text = "Vin" Then  'Cali Vin
            Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "Vin mode Selected: " & vbCrLf)
            CaliMode = &H10
            CaliModeLineNum = 1
            CaliRealAmp = 128
            CaliADAmp = 512
            CaliDebugRegister = &H0
            CaliLabel1.Text = "Vin ADC"
            CaliLabel2.Text = "Vin Real"
            CaliLabel3.Text = "Reserved"
            CaliConditionLabel1.Text = "Vin=110Vac, Load=50A"
            CaliConditionLabel2.Text = "Vin=230Vac, Load=100A"
        ElseIf CaliSelectModeComboBox.Text = "Iin" Then  'Cali Iin
            Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "Iin mode Selected: " & vbCrLf)
            CaliMode = &H20
            CaliModeLineNum = 4
            CaliRealAmp = 128
            CaliADAmp = 512
            CaliDebugRegister = &H1
            CaliLabel1.Text = "Iin ADC"
            CaliLabel2.Text = "Iin Real"
            CaliLabel3.Text = "Reserved"
            CaliConditionLabel1.Text = "Vin=230Vac, 5% Load=10A"
            CaliConditionLabel2.Text = "Vin=230Vac, 10% Load=20A"
            CaliConditionLabel3.Text = "Vin=230Vac, 20% Load=40A"
            CaliConditionLabel4.Text = "Vin=230Vac, 50% Load=100A"
            CaliConditionLabel5.Text = "Vin=230Vac, 100% Load=200A"
        ElseIf CaliSelectModeComboBox.Text = "Pin" Then  'Cali Pin
            Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "Pin mode Selected: " & vbCrLf)
            CaliMode = &H30
            CaliModeLineNum = 4
            CaliRealAmp = 32
            CaliADAmp = 128
            'CaliRealAmp = 128
            'CaliADAmp = 512
            CaliDebugRegister = &H2
            CaliLabel1.Text = "Pin ADC"
            CaliLabel2.Text = "Pin Real"
            CaliLabel3.Text = "Reserved"
            CaliConditionLabel1.Text = "Vin=230Vac, 5% Load=10A"
            CaliConditionLabel2.Text = "Vin=230Vac, 10% Load=20A"
            CaliConditionLabel3.Text = "Vin=230Vac, 20% Load=40A"
            CaliConditionLabel4.Text = "Vin=230Vac, 50% Load=100A"
            CaliConditionLabel5.Text = "Vin=230Vac, 100% Load=200A"
        ElseIf CaliSelectModeComboBox.Text = "V1_Vol" Then  'Cali V1_Vol
            Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "V1_Vol mode Selected: " & vbCrLf)
            CaliMode = &H40
            CaliModeLineNum = 1
            CaliRealAmp = 128
            CaliADAmp = 512
            CaliDebugRegister = &H10
            CaliLabel1.Text = "V1_Int ADC"
            CaliLabel2.Text = "V1_Int Real"
            CaliLabel3.Text = "Reserved"
            CaliConditionLabel1.Text = "Set V1_AD and V1_Real Value as 0"
            CaliConditionLabel2.Text = "Vin=230Vac, 50% Load=100A"
        ElseIf CaliSelectModeComboBox.Text = "V1_Cur" Then  'Cali V1_Cur
            Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "V1_Cur mode Selected: " & vbCrLf)
            CaliMode = &H50
            CaliModeLineNum = 4
            CaliRealAmp = 128
            CaliADAmp = 512
            CaliDebugRegister = &H12
            CaliLabel1.Text = "Iout ADC"
            CaliLabel2.Text = "Iout Real"
            CaliLabel3.Text = "Reserved"
            CaliConditionLabel1.Text = "Vin=230Vac, 5% Load=10A"
            CaliConditionLabel2.Text = "Vin=230Vac, 10% Load=20A"
            CaliConditionLabel3.Text = "Vin=230Vac, 20% Load=40A"
            CaliConditionLabel4.Text = "Vin=230Vac, 50% Load=100A"
            CaliConditionLabel5.Text = "Vin=230Vac, 100% Load=200A"
        ElseIf CaliSelectModeComboBox.Text = "Vsb_Vol" Then  'Cali Vsb_Vol
            Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "Vsb_Vol mode Selected: " & vbCrLf)
            CaliMode = &H60
            CaliModeLineNum = 1
            CaliRealAmp = 128
            CaliADAmp = 512
            CaliDebugRegister = &H15
            CaliLabel1.Text = "Vsb ADC"
            CaliLabel2.Text = "Vsb Real"
            CaliLabel3.Text = "Reserved"
            CaliConditionLabel1.Text = "Set Vsb_AD and Vsb_Real Value as 0"
            CaliConditionLabel2.Text = "Vin=230Vac, 50% Vsb_Load=1.5A"
        ElseIf CaliSelectModeComboBox.Text = "Vsb_Cur" Then  'Cali Vsb_Cur
            Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "Vsb_Cur mode Selected: " & vbCrLf)
            CaliMode = &H70
            CaliModeLineNum = 3
            CaliRealAmp = 128
            CaliADAmp = 512
            CaliDebugRegister = &H17
            CaliLabel1.Text = "Isb ADC"
            CaliLabel2.Text = "Isb Real"
            CaliLabel3.Text = "Reserved"
            CaliConditionLabel1.Text = "Vin=230Vac, 10% Vsb_Load=0.3A"
            CaliConditionLabel2.Text = "Vin=230Vac, 20% Vsb_Load=0.6A"
            CaliConditionLabel3.Text = "Vin=230Vac, 50% Vsb_Load=1.5A"
            CaliConditionLabel4.Text = "Vin=230Vac, 100% Vsb_Load=3A"
        ElseIf CaliSelectModeComboBox.Text = "V1_Ishare_HL" Then  'Cali V1 current share of high line
            Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "V1_Ishare_HL mode Selected: " & vbCrLf)
            CaliMode = &H91
            CaliModeLineNum = 3
            CaliRealAmp = 1
            CaliADAmp = 4096
            CaliDebugRegister = &H12
            CaliLabel1.Text = "Iout ADC"
            CaliLabel2.Text = "Real V_LS"
            CaliLabel3.Text = "Theo V_LS"
            CaliConditionLabel1.Text = "Vin=230Vac, 10% Load=20A"
            CaliConditionLabel2.Text = "Vin=230Vac, 20% Load=40A"
            CaliConditionLabel3.Text = "Vin=230Vac, 50% Load=100A"
            CaliConditionLabel4.Text = "Vin=230Vac, 100% Load=200A"
            Label76.Visible = True
            Label16.Visible = True
            Label76.Visible = True
            Button64.Visible = True
            Button45.Visible = True
        ElseIf CaliSelectModeComboBox.Text = "V1_Ishare_LL" Then  'Cali V1 current share of low line
            Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "V1_Ishare_LL mode Selected: " & vbCrLf)
            CaliMode = &H90
            CaliModeLineNum = 3
            CaliRealAmp = 1
            CaliADAmp = 4096
            CaliDebugRegister = &H12
            CaliLabel1.Text = "Iout ADC"
            CaliLabel2.Text = "Real V_LS"
            CaliLabel3.Text = "Theo V_LS"
            CaliConditionLabel1.Text = "Vin=110Vac, 10% Load=10A"
            CaliConditionLabel2.Text = "Vin=110Vac, 20% Load=20A"
            CaliConditionLabel3.Text = "Vin=110Vac, 50% Load=50A"
            CaliConditionLabel4.Text = "Vin=110Vac, 100% Load=100A"
            Label76.Visible = True
            Label6.Visible = True
            Label71.Visible = True
            Button64.Visible = True
            Button45.Visible = True

            'Add cali mode here
        End If
        CaliLineADValue1.Visible = False
        CaliLineRealValue1.Visible = False
        CaliLineExceptValue1.Visible = False
        CaliReadAdc1_Button.Visible = False
        CaliSendButton1.Visible = False
        CaliLineADValue2.Visible = False
        CaliLineRealValue2.Visible = False
        CaliLineExceptValue2.Visible = False
        CaliReadAdc2_Button.Visible = False
        CaliSendButton2.Visible = False
        CaliLineADValue3.Visible = False
        CaliLineRealValue3.Visible = False
        CaliLineExceptValue3.Visible = False
        CaliReadAdc3_Button.Visible = False
        CaliSendButton3.Visible = False
        CaliLineADValue4.Visible = False
        CaliLineRealValue4.Visible = False
        CaliLineExceptValue4.Visible = False
        CaliReadAdc4_Button.Visible = False
        CaliSendButton4.Visible = False
        CaliLineADValue5.Visible = False
        CaliLineRealValue5.Visible = False
        CaliLineExceptValue5.Visible = False
        CaliReadAdc5_Button.Visible = False

        If CaliModeLineNum >= 1 Then
            CaliLineADValue1.Visible = True
            CaliLineRealValue1.Visible = True
            CaliLineExceptValue1.Visible = True
            CaliLineADValue1.Text = 0
            CaliLineRealValue1.Text = 0
            CaliLineExceptValue1.Text = 0
            CaliReadAdc1_Button.Visible = True
            CaliSendButton1.Visible = True
            CaliSendButton1.BackColor = Color.Transparent
            CaliLineADValue2.Visible = True
            CaliLineRealValue2.Visible = True
            CaliLineExceptValue2.Visible = True
            CaliLineADValue2.Text = 0
            CaliLineRealValue2.Text = 0
            CaliLineExceptValue2.Text = 0
            CaliReadAdc2_Button.Visible = True
        End If
        If CaliModeLineNum >= 2 Then
            CaliSendButton2.Visible = True
            CaliSendButton2.BackColor = Color.Transparent
            CaliLineADValue3.Visible = True
            CaliLineRealValue3.Visible = True
            CaliLineExceptValue3.Visible = True
            CaliLineADValue3.Text = 0
            CaliLineRealValue3.Text = 0
            CaliLineExceptValue3.Text = 0
            CaliReadAdc3_Button.Visible = True
        End If
        If CaliModeLineNum >= 3 Then
            CaliSendButton3.Visible = True
            CaliSendButton3.BackColor = Color.Transparent
            CaliLineADValue4.Visible = True
            CaliLineRealValue4.Visible = True
            CaliLineExceptValue4.Visible = True
            CaliLineADValue4.Text = 0
            CaliLineRealValue4.Text = 0
            CaliLineExceptValue4.Text = 0
            CaliReadAdc4_Button.Visible = True
        End If
        If CaliModeLineNum >= 4 Then
            CaliSendButton4.Visible = True
            CaliSendButton4.BackColor = Color.Transparent
            CaliLineADValue5.Visible = True
            CaliLineRealValue5.Visible = True
            CaliLineExceptValue5.Visible = True
            CaliLineADValue5.Text = 0
            CaliLineRealValue5.Text = 0
            CaliLineExceptValue5.Text = 0
            CaliReadAdc5_Button.Visible = True
        End If

        If CaliMode = &H50 Then
            CaliLineRealValue1.Text = 10.0
            CaliLineRealValue2.Text = 20.0
            CaliLineRealValue3.Text = 40.0
            CaliLineRealValue4.Text = 100.0
            CaliLineRealValue5.Text = 200.0
        ElseIf CaliMode = &H91 Then
            CaliLineExceptValue1.Text = 0.8
            CaliLineExceptValue2.Text = 1.6
            CaliLineExceptValue3.Text = 4.0
            CaliLineExceptValue4.Text = 8.0
        ElseIf CaliMode = &H90 Then
            CaliLineExceptValue1.Text = 0.8
            CaliLineExceptValue2.Text = 1.6
            CaliLineExceptValue3.Text = 4.0
            CaliLineExceptValue4.Text = 8.0
        End If
    End Sub

    Private Sub Append_Text_Calibration(ByVal Str_Data As String)
        Dim CaliLogPathStr As String

        RichTextBox3.AppendText(Str_Data)
        RichTextBox3.SelectionStart = RichTextBox3.Text.Length
        RichTextBox3.ScrollToCaret()

        CaliLogPathStr = System.AppDomain.CurrentDomain.BaseDirectory & "\Calibration Log"
        If Not My.Computer.FileSystem.DirectoryExists(CaliLogPathStr) Then
            'if not found the 'Calibration Log' folder, then creat it
            My.Computer.FileSystem.CreateDirectory(CaliLogPathStr)
        End If
        CaliLogPathStr = System.AppDomain.CurrentDomain.BaseDirectory & "\Calibration Log\" & Format(DateTime.Now, "yyyyMMdd") & ".txt"
        'If Not My.Computer.FileSystem.FileExists(CaliLogPathStr) Then
        'if not found the file, then creat it
        'File.CreateText(CaliLogPathStr)
        'End If
        'if not found the file, then creat it and write data in it
        File.AppendAllText(CaliLogPathStr, Str_Data)

    End Sub

    Private Sub CaliReadAdc1_Button_Click(sender As System.Object, e As System.EventArgs) Handles CaliReadAdc1_Button.Click
        Write_Buf(0) = CaliDebugRegister
        Write_Byte(&HFA)
        Read_Word(&HFA)
        CaliLineADValue1.Text = (Read_Buf(1) * 256) + Read_Buf(0)
    End Sub

    Private Sub CaliReadAdc2_Button_Click(sender As System.Object, e As System.EventArgs) Handles CaliReadAdc2_Button.Click
        Write_Buf(0) = CaliDebugRegister
        Write_Byte(&HFA)
        Read_Word(&HFA)
        CaliLineADValue2.Text = (Read_Buf(1) * 256) + Read_Buf(0)
    End Sub

    Private Sub CaliReadAdc3_Button_Click(sender As System.Object, e As System.EventArgs) Handles CaliReadAdc3_Button.Click
        Write_Buf(0) = CaliDebugRegister
        Write_Byte(&HFA)
        Read_Word(&HFA)
        CaliLineADValue3.Text = (Read_Buf(1) * 256) + Read_Buf(0)
    End Sub

    Private Sub CaliReadAdc4_Button_Click(sender As System.Object, e As System.EventArgs) Handles CaliReadAdc4_Button.Click
        Write_Buf(0) = CaliDebugRegister
        Write_Byte(&HFA)
        Read_Word(&HFA)
        CaliLineADValue4.Text = (Read_Buf(1) * 256) + Read_Buf(0)
    End Sub

    Private Sub CaliReadAdc5_Button_Click(sender As System.Object, e As System.EventArgs) Handles CaliReadAdc5_Button.Click
        Write_Buf(0) = CaliDebugRegister
        Write_Byte(&HFA)
        Read_Word(&HFA)
        CaliLineADValue5.Text = (Read_Buf(1) * 256) + Read_Buf(0)
    End Sub

    Private Sub CaliSendButton1_Click(sender As System.Object, e As System.EventArgs) Handles CaliSendButton1.Click
        CaliSendButton1.BackColor = Color.Transparent
        CaliLineIndex = 1
        If Process_Cal_Data(Val(CaliLineADValue1.Text), Val(CaliLineRealValue1.Text), Val(CaliLineExceptValue1.Text),
                            Val(CaliLineADValue2.Text), Val(CaliLineRealValue2.Text), Val(CaliLineExceptValue2.Text),
                              CaliADAmp, CaliRealAmp, CaliMode, CaliLineIndex, CaliModeLineNum) Then
            Send_Cal_Data(CaliMode, CaliLineIndex, CaliAmp, CaliOfs, CaliThr)
        End If
    End Sub

    Function Process_Cal_Data(ByVal ADC1 As Double, ByVal REAL1 As Double, ByVal EXP1 As Double,
                             ByVal ADC2 As Double, ByVal REAL2 As Double, ByVal EXP2 As Double,
                             ByVal AD_Amp As Double, ByVal REAL_Amp As Double,
                             ByVal Mode As Byte, ByVal LineIndex As Byte, ByVal LineNum As Byte) As Boolean
        Dim Line_K As Double
        Dim Line_B As Double
        Dim CaliAmpTemp As Double
        Dim CaliOfsTemp As Double
        Dim CaliThrTemp As Double

        Append_Text_Calibration(Format(DateTime.Now, "yyyy/MM/dd HH:mm:ss") & " —— " & "Calibrate Line " & LineIndex & ":" & vbCrLf)
        If ADC1 = ADC2 Then
            Line_K = 0
            Line_B = 0
            Append_Text_Calibration("ERROR: The value of two AD numbers are equal!" & vbCrLf)
            Return False
        End If

        If (Mode = &H91) Or (Mode = &H90) Then  'Ishare or droop cali method  '&H91 is Ishare mode
            CaliAmpTemp = Int(AD_Amp * (EXP2 - EXP1) / (REAL2 - REAL1) + 0.5)
            CaliOfsTemp = Int(((EXP1 - REAL1) * ADC2 - (EXP2 - REAL2) * ADC1) / (REAL2 - REAL1) + 0.5)
        Else
            Line_K = (REAL2 - REAL1) / (ADC2 - ADC1)
            Line_B = REAL1 - (Line_K * ADC1)
            CaliAmpTemp = Int((AD_Amp * REAL_Amp * Line_K + 0.5))
            CaliOfsTemp = Int((REAL_Amp * Line_B + 0.5))
        End If


        If LineIndex = LineNum Then
            CaliThrTemp = 16384
        Else
            CaliThrTemp = ADC2
        End If

        If (CaliAmpTemp > 32767 Or CaliAmpTemp < -32768) Then
            Append_Text_Calibration(CaliAmpTemp & "Amplification value out of range!" & vbCrLf)
            CaliAmp = 0
            CaliOfs = 0
            CaliThr = 0
            Return False
        End If
        If (CaliOfsTemp > 32767 Or CaliOfsTemp < -32768) Then
            Append_Text_Calibration(CaliOfsTemp & "Offset value out of range!" & vbCrLf)
            CaliAmp = 0
            CaliOfs = 0
            CaliThr = 0
            Return False
        End If
        If (CaliThrTemp > 32767 Or CaliThrTemp < -32768) Then
            Append_Text_Calibration(CaliThrTemp & "Threshold value out of range!" & vbCrLf)
            CaliAmp = 0
            CaliOfs = 0
            CaliThr = 0
            Return False
        End If
        If CaliAmpTemp < 0 Then
            CaliAmp = CUShort(65536 + CaliAmpTemp)
        Else
            CaliAmp = CaliAmpTemp
        End If
        If CaliOfsTemp < 0 Then
            CaliOfs = CUShort(65536 + CaliOfsTemp)
        Else
            CaliOfs = CaliOfsTemp
        End If
        If CaliThrTemp < 0 Then
            CaliThr = CUShort(65536 + CaliThrTemp)
        Else
            CaliThr = CaliThrTemp
        End If
        Append_Text_Calibration("Amplification = " & CaliAmpTemp & "(" & "0x" & Hex(CaliAmp) & "); ")
        Append_Text_Calibration("Offset = " & CaliOfsTemp & "(" & "0x" & Hex(CaliOfs) & "); ")
        Append_Text_Calibration("Threshold = " & CaliThrTemp & "(" & "0x" & Hex(CaliThr) & "); " & vbCrLf)
        Return True
    End Function
    Private Sub Send_Cal_Data(ByVal Mode As Byte, ByVal LineIndex As Byte, ByVal Amp As Double, ByVal Ofs As Double, ByVal Thr As Double)
        Dim CaliCmd As Byte = &HC9

        Write_Buf(0) = &H8 ' byte count
        Write_Buf(1) = Mode  ' cal mode
        Write_Buf(2) = LineIndex ' Cal Line
        Write_Buf(3) = Amp Mod 256 ' Gain LSB
        Write_Buf(4) = Amp \ 256 ' Gain MSB
        Write_Buf(5) = Ofs Mod 256 ' Offset LSB
        Write_Buf(6) = Ofs \ 256 ' Offset MSB
        Write_Buf(7) = Thr Mod 256 ' Threshold LSB
        Write_Buf(8) = Thr \ 256 ' Threshold MSB
        Write_Block_1(CaliCmd)
        CaliSendDataDoneFlag = True
        Append_Text_Calibration("Send Data: " & Convert.ToString(CaliCmd, 16).ToUpper & " - " & Write_Buf_Str & vbCrLf)
    End Sub
    Function Read_Cal_Data1(ByVal Mode As Byte, ByVal LineIndex As Byte, ByVal Amp As Double, ByVal Ofs As Double, ByVal Thr As Double) As Boolean
        Dim ErrorFalg As Boolean
        Dim AmpRead As Double
        Dim OfsRead As Double
        Dim ThrRead As Double
        Dim ReadStr As String
        Dim CaliCmd As Byte = &HC9
        ErrorFalg = False
        Read_Block1(CaliCmd, 8)
        ReadStr = Read_Buf_Str
        Append_Text_Calibration("Read Data: " & Convert.ToString(CaliCmd, 16).ToUpper & " - " & ReadStr & vbCrLf)
        ReadStr = ""
        If Not Read_Buf(0) = 8 Then
            Append_Text_Calibration("Error: The byte conut read is wrong" & vbCrLf)
            ErrorFalg = True
        End If
        If Not Read_Buf(1) = Mode Then
            Append_Text_Calibration("Error: The calibration mode read is wrong" & vbCrLf)
            ErrorFalg = True
        End If
        If Not Read_Buf(2) = LineIndex Then
            Append_Text_Calibration("Error: The calibration line read is wrong" & vbCrLf)
            ErrorFalg = True
        End If
        AmpRead = Read_Buf(3) + (Read_Buf(4) * 256)
        OfsRead = Read_Buf(5) + (Read_Buf(6) * 256)
        ThrRead = Read_Buf(7) + (Read_Buf(8) * 256)

        If Not AmpRead = Amp Then
            Append_Text_Calibration("Error: The amplification read is wrong" & vbCrLf)
            ErrorFalg = True
        End If
        If Not OfsRead = Ofs Then
            Append_Text_Calibration("Error: The offset read is wrong" & vbCrLf)
            ErrorFalg = True
        End If
        If Not ThrRead = Thr Then
            Append_Text_Calibration("Error: The threshold read is wrong" & vbCrLf)
            ErrorFalg = True
        End If

        If ErrorFalg = True Then
            If LineIndex = 1 Then
                CaliSendButton1.BackColor = Color.Red
            End If
            If LineIndex = 2 Then
                CaliSendButton2.BackColor = Color.Red
            End If
            If LineIndex = 3 Then
                CaliSendButton3.BackColor = Color.Red
            End If
            If LineIndex = 4 Then
                CaliSendButton4.BackColor = Color.Red
            End If
            Append_Text_Calibration("Calibrate Line " & LineIndex & " FAIL!" & vbCrLf)
            Return False
        Else
            If LineIndex = 1 Then
                CaliSendButton1.BackColor = Color.Chartreuse
            End If
            If LineIndex = 2 Then
                CaliSendButton2.BackColor = Color.Chartreuse
            End If
            If LineIndex = 3 Then
                CaliSendButton3.BackColor = Color.Chartreuse
            End If
            If LineIndex = 4 Then
                CaliSendButton4.BackColor = Color.Chartreuse
            End If
            Append_Text_Calibration("Calibrate Line " & LineIndex & " PASS!" & vbCrLf)
            Return True
        End If
    End Function

    Private Sub CaliSendButton2_Click(sender As System.Object, e As System.EventArgs) Handles CaliSendButton2.Click
        CaliSendButton2.BackColor = Color.Transparent
        CaliLineIndex = 2
        If Process_Cal_Data(Val(CaliLineADValue2.Text), Val(CaliLineRealValue2.Text), Val(CaliLineExceptValue2.Text),
                            Val(CaliLineADValue3.Text), Val(CaliLineRealValue3.Text), Val(CaliLineExceptValue3.Text),
                            CaliADAmp, CaliRealAmp, CaliMode, CaliLineIndex, CaliModeLineNum) Then
            Send_Cal_Data(CaliMode, CaliLineIndex, CaliAmp, CaliOfs, CaliThr)
        End If
    End Sub

    Private Sub CaliSendButton3_Click(sender As System.Object, e As System.EventArgs) Handles CaliSendButton3.Click
        CaliSendButton3.BackColor = Color.Transparent
        CaliLineIndex = 3
        If Process_Cal_Data(Val(CaliLineADValue3.Text), Val(CaliLineRealValue3.Text), Val(CaliLineExceptValue3.Text),
                            Val(CaliLineADValue4.Text), Val(CaliLineRealValue4.Text), Val(CaliLineExceptValue4.Text),
                            CaliADAmp, CaliRealAmp, CaliMode, CaliLineIndex, CaliModeLineNum) Then
            Send_Cal_Data(CaliMode, CaliLineIndex, CaliAmp, CaliOfs, CaliThr)
        End If
    End Sub

    Private Sub CaliSendButton4_Click(sender As System.Object, e As System.EventArgs) Handles CaliSendButton4.Click
        CaliSendButton4.BackColor = Color.Transparent
        CaliLineIndex = 4
        If Process_Cal_Data(Val(CaliLineADValue4.Text), Val(CaliLineRealValue4.Text), Val(CaliLineExceptValue4.Text),
                            Val(CaliLineADValue5.Text), Val(CaliLineRealValue5.Text), Val(CaliLineExceptValue5.Text),
                            CaliADAmp, CaliRealAmp, CaliMode, CaliLineIndex, CaliModeLineNum) Then
            Send_Cal_Data(CaliMode, CaliLineIndex, CaliAmp, CaliOfs, CaliThr)
        End If
    End Sub

    Private Sub ClearCaliLogButton_Click(sender As System.Object, e As System.EventArgs) Handles ClearCaliLogButton.Click
        RichTextBox3.Text = ""
    End Sub

    Private Sub SaveAsCaliLog_Click(sender As System.Object, e As System.EventArgs) Handles SaveAsCaliLog.Click

    End Sub

    Private Sub Button64_Click(sender As System.Object, e As System.EventArgs) Handles Button64.Click
        Write_Buf(0) = 1
        Write_Byte(&HCA)
    End Sub

    Private Sub Button45_Click(sender As System.Object, e As System.EventArgs) Handles Button45.Click
        Write_Buf(0) = 0
        Write_Byte(&HCA)
    End Sub

#If 0 Then
    Private Sub SaveAsCaliLog_Click(sender As Object, e As EventArgs) Handles SaveAsCaliLog.Click
        Dim CaliLogPathStr As String
        Dim fileDialogSaveCaliLog As New SaveFileDialog
        Dim RichTextLines As Double
        fileDialogSaveCaliLog.Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*"
        fileDialogSaveCaliLog.FilterIndex = 1
        fileDialogSaveCaliLog.RestoreDirectory = False
        'fileDialogSaveCaliLog.Title = "Save"
        'fileDialogSaveCaliLog.FileName = System.AppDomain.CurrentDomain.BaseDirectory
        'CaliLogPathStr = System.AppDomain.CurrentDomain.BaseDirectory & "\Calibration Log"
        'If Not My.Computer.FileSystem.DirectoryExists(CaliLogPathStr) Then
        'if not found the 'Calibration Log' folder, then creat it
        'My.Computer.FileSystem.CreateDirectory(CaliLogPathStr)
        'End If
        'CaliLogPathStr = System.AppDomain.CurrentDomain.BaseDirectory & "\Calibration Log\" & Format(DateTime.Now, "yyyyMMdd") & ".txt"
        'If Not My.Computer.FileSystem.FileExists(CaliLogPathStr) Then
        'if not found the file, then creat it
        'File.CreateText(CaliLogPathStr)
        'End If
        'RichTextLines = RichTextBox2.Lines.Length
        'Append_Text_Calibration(RichTextLines & vbCrLf)
        'For i = 0 To RichTextLines - 1
        'File.AppendAllText(CaliLogPathStr, RichTextBox2.Lines(i) & vbCrLf)
        'Next
        'Append_Text_Calibration("The data is saved to:" & CaliLogPathStr & vbCrLf)
        'File.WriteAllLines(CaliLogPathStr, strSp, Encoding.Default)
        If fileDialogSaveCaliLog.ShowDialog() = DialogResult.OK Then
            CaliLogPathStr = fileDialogSaveCaliLog.FileName
            File.CreateText(CaliLogPathStr)
            RichTextLines = RichTextBox2.Lines.Length
            For i = 0 To RichTextLines - 1
                File.AppendAllText(CaliLogPathStr, RichTextBox2.Lines(i) & vbCrLf)
            Next
        End If
    End Sub
#End If     
End Class
